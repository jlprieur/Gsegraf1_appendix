<?xml version="1.0"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" [
  <!ENTITY tex "TeX">
  <!ENTITY latex "LaTeX">
]>
<book id="gsegrafix.xml" lang="en">
  <title>GSEGrafix Manual</title>
<!-- %**end of header -->
<!-- @dircategory Graphics -->
<!-- @direntry -->
<!-- * GSEGrafix: (gsegrafix). A GNOME application for creating scientific and engineering plots. -->
<!-- @end direntry -->
  <bookinfo>
    <legalnotice>
      <para>This manual is for GSEGrafix, a GNOME application for creating scientific and engineering plots.
Copyright &copy; 2008, 2009, 2010, 2011 Spencer A. Buckner.</para>
      <para>Permission is granted to copy, distribute, and/or modify this document under the terms of the <ulink url="./COPYING-DOCS">GNU Free Documentation License</ulink>, Version 1.3, or any later version published by the <ulink url="http://www.fsf.org/">Free Software Foundation</ulink>, with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.</para>
      <para>Use, copying, modification, and distribution of the GSEGrafix plotting program are subject to the terms of the <ulink url="./COPYING">GNU General Public License</ulink>, Version 3, or any later version published by the <ulink url="http://www.fsf.org/">Free Software Foundation</ulink>.</para>
    </legalnotice>
</bookinfo>
  <chapter label="" xreflabel="Overview" id="Top">
    <title>Overview</title>
    <informalfigure>
      <mediaobject><imageobject><imagedata fileref="./figures/gsegrafix-logo.png" format="PNG"></imagedata></imageobject><textobject><literallayout>gsegrafix-logo.png
</literallayout></textobject></mediaobject>
    </informalfigure>
    <para>GSEGrafix is a GNOME application for creating scientific and engineering plots. The program reads a parameter file which specifies the names of data files, formats of those files, and other plot-specific parameters (such as plot type, axis type, axis labels, title, etc). The program can be run from a terminal window or from a graphical user interface.</para>
  </chapter>

  <chapter label="" xreflabel="1 Introduction" id="Introduction">
    <title>1 Introduction</title>
    <para>GSEGrafix is a <ulink url="http://www.gnome.org">GNOME</ulink> application which uses an anti-aliased GNOME canvas for creating scientific and engineering plots. The program is written in C and reads ASCII parameter files and data files. The parameter files contain keywords and corresponding arguments for specifying plot parameters (such as data file names, data file formats, plot type, plot style, axis type, axis labels, etc). Operation of the program is described in more detail below. Eleven example plots, corresponding examples of <ulink url="http://www.octave.org">Octave</ulink> code or C code for creating the data files, and corresponding parameter files are included at the end of this document. Separate data files and parameter files are provided for Examples 1 and 7. These files can be copied and used to run the program. Links to these files are included in the descriptions of these two examples.</para>
    <para>GSEGrafix can make rectangular two-dimensional plots (with linear, semi-log, or log-log axes), histograms, polar-axis plots, and three-dimensional plots (with linear axes). Three-dimensional plots include points, contour, color, and mesh plots. Data for three-dimensional plots can also be used to create two-dimensional plots using contour lines or color to represent values of a third variable.</para>
    <para>A menu bar at the top of the plot window allows users to save the plot to a file, send the plot to a printer, copy the plot to the GNU/Linux clipboard, change the axis limits of the plot, change the orientation of three-dimensional plots, and display mouse coordinates in the lower left corner of the plot window for two-dimensional plots. Supported file formats for saving the plot to a file are bmp (Windows Bitmap), jpeg (Joint Photographic Experts Group), and png (Portable Network Graphics).</para>
    <para>All plots include options to add minor tick marks, grid, legend, text, and date-time string to the plot. Additional images can be added to a plot by specifying image file names and desired locations on the plot. Rectangular two-dimensional plots include a zoom capability using the mouse to specify a rectangle on the plot to expand. Hidden lines are removed from three-dimensional mesh and contour plots unless specified otherwise. The program calculates "nice" tick-mark labels for all plots.</para>
    <para>The program has two executables, gsegrafix and gsegraf. The gsegrafix executable creates a window which can be used to choose a parameter file. This window is shown below:</para>
    <informalfigure>
      <mediaobject><imageobject><imagedata fileref="./figures/gsegrafix.png" format="PNG"></imagedata></imageobject><textobject><literallayout>gsegrafix.png
</literallayout></textobject></mediaobject>
    </informalfigure>
    <para>When the gsegrafix executable is run and a parameter file has been chosen, the gsegraf executable is called to create the plot window. An example plot window is shown below:</para>
    <informalfigure>
      <mediaobject><imageobject><imagedata fileref="./figures/window.png" format="PNG"></imagedata></imageobject><textobject><literallayout>window.png
</literallayout></textobject></mediaobject>
    </informalfigure>
    <para>The program can also be run by using either the gsegrafix or gsegraf command followed by the name of a parameter file:</para>
    <screen>
$ gsegrafix /home/sab/gsegrafix/param_files/bessel_param.txt &amp;
</screen>
    <para>or:</para>
    <screen>$ gsegraf /home/sab/gsegrafix/param_files/bessel_param.txt &amp;
</screen>
    <para>This help file can be displayed by using either the gsegrafix or gsegraf command followed by -h:</para>
    <screen>$ gsegrafix -h
</screen>
    <para>or:</para>
    <screen>$ gsegraf -h
</screen>
    <para>If the program's path is not included in the PATH environment variable, the path must be included in the commands listed above. However, if gsegrafix is used to choose the parameter file, then the program's path must be included in the PATH environment variable so that gsegraf will be found when gsegrafix calls it.</para>
    <para>The program can also be installed on the desktop Panel. To add GSEGrafix to the Panel right-click in an unused area of the Panel and select <emphasis role="bold">Add to Panel &rarr; Custom Application Launcher</emphasis>. This will bring up a dialog box where the name of the application, the path (if needed) and name of the command that starts the application, and a comment describing the application can be entered. By clicking the Icon box a browser dialog box will appear where one can choose an appropriate icon. By default the installation process writes the GSEGrafix logo file, gsegrafix-logo.png, to /usr/local/share/pixmaps if the program is compiled and installed by the user. The logo file is written to /usr/share/pixmaps if the program is installed from an rpm file. Appropriate entries for the dialog box are:</para>
    <screen>   Type: Application
   Name: GSEGrafix
Command: gsegrafix %f
Comment: Scientific and engineering plotting program
   Icon: /usr/local/share/pixmaps/gsegrafix-logo.png
</screen>
    <para><indexterm role="cp"><primary>introduction</primary></indexterm><indexterm role="cp"><primary>capabilities</primary></indexterm><indexterm role="cp"><primary>operation summary</primary></indexterm><indexterm role="cp"><primary>run GSEGrafix from panel</primary></indexterm></para>
  </chapter>

  <chapter label="" xreflabel="2 Parameter file" id="Parameter-file">
    <title>2 Parameter file</title>
    <para>The parameter file contains keywords, which must begin in column 1, followed by appropriate parameters. If the parameter is a string, it must be enclosed in double quotation marks, "string". Parameters which are single characters or numbers are not enclosed in quotation marks. If a keyword does not begin in column 1, that line is ignored when the parameter file is read. Comments can be inserted in a parameter file if they are preceded by a hash character, #. The # character and comment can appear anywhere after the parameters in a line containing a keyword and corresponding parameters:</para>
    <screen>
keyword   parameters   # comment
</screen>
    <para>A comment can also appear on a separate line of its own. If it is desired to insert a # character in a parameter string (for keywords <literal>xlabel</literal>, <literal>ylabel</literal>, <literal>title</literal>, etc), the # character must be preceded by a backslash, \, to distinguish it from a comment:</para>
    <screen>title   "Plot \#1"   # comment
</screen>
    <para>This line will result in a plot title of Plot #1. If a string of at least five # characters (#####) is inserted in the parameter file, beginning in column 1, then all following lines are ignored. Notes or other information can be added after this line and will not affect program execution. Multiline parameter strings can be created by inserting \n, the newline escape sequence in C, where a line break is desired. The possible keywords are:</para>
    <screen>file_name
file_format
plot_type
plot_style
axis_type
axis_scale
axis_limits
view3d
minor_ticks
grid
xlabel
ylabel
zlabel
title
bin_width
bin_value
bin_ref
ninterp
contours
contour_color
mesh_color
stems
rect_coords
rect_style
ellipse_coords
ellipse_style
line_coords
line_style
symbol_coords
symbol_style
legend_string
legend_coords_abs
legend_coords_rel
legend_anchor
text_string
text_coords_abs
text_coords_rel
text_anchor
image_filename
image_coords_abs
image_coords_rel
image_anchor
date_time
save
save_close
background_color
background_image
window_size
plot_box
x_tick_marks
y_tick_marks
z_tick_marks
x_tick_labels
y_tick_labels
z_tick_labels
font_name
font_size_date_time
font_size_legend
font_size_text
font_size_tick_labels
font_size_axis_labels
font_size_title
</screen>
    <para>Each of these keywords and the parameters which follow it are described below. A list of keywords with example parameters is in the Keyword summary section.</para>

    <sect1 label="">
      <title>2.1 <literal>file_name</literal></title>
      <para>The keyword, <literal>file_name</literal>, specifies the name (and path) of a data file. The maximum number of data files and the maximum number of data points in each file are not limited by the program.</para>
    </sect1>

    <sect1 label="">
      <title>2.2 <literal>file_format</literal></title>
      <para>The keyword, <literal>file_format</literal>, specifies the format of the data contained in the data file using the conventions of the C programming language (see Brian W. Kernighan and Dennis M. Ritchie, <citetitle>The C Programming Language</citetitle>, Second Edition, Section B1.3 Formatted Input, pages 245 - 246). Since all numbers read from data files are stored as double-precision numbers, a double-precision format must be used. The format <literal>%lf</literal> may be used exclusively since it covers numbers with optional sign, optional decimal point, and optional exponent. Inserting an asterisk (*) between the percent sign (%) and lf, as in <literal>%*lf</literal>, will cause that column of numbers to be ignored. The <literal>file_format</literal> for each data file must be specified for <literal>"points"</literal> and <literal>"histogram"</literal> plot types but not for <literal>"mesh"</literal>, <literal>"contour"</literal>, and <literal>"color"</literal> plot types.</para>
    </sect1>

    <sect1 label="">
      <title>2.3 <literal>plot_type</literal></title>
      <para>The keyword, <literal>plot_type</literal>, specifies the type of plot to be drawn. The possible parameters are:</para>
      <screen>
"points"      (linear, semilogx, semilogy, loglog, polar, and 3d axis types)
"histogram"   (linear axis type only)
"contour"     (linear and 3d axis types)
"color"       (linear and 3d axis types)
"mesh"        (3d axis type only)
</screen>
      <para>The <literal>"points"</literal> plot type refers to plots where the corresponding data file has columns of x and y, theta and r, or x, y, and z coordinates to be plotted. This plot type is supported for all axis types (see the <literal>axis_type</literal> keyword below).</para>
      <para>The <literal>"histogram"</literal> plot type refers to plots where the corresponding data file has a column of numbers whose histogram is to be calculated. This plot type is supported for only 2d linear axes.</para>
      <para>The <literal>"color"</literal> plot type refers to plots where z-axis data is interpolated over the entire area of the plot and converted to corresponding colors. This plot type is supported for 2d linear and 3d axes. For 2d linear axes a color axis is drawn to the right of the plot showing the relationship between plotted colors and z-axis values.</para>
      <para>The <literal>"contour"</literal> plot type is supported for both 2d linear and 3d axes. In the case of 2d contour plots z-axis data is represented in either of two ways. One method uses contour lines of a single color and contour-line labels to specify the z-axis values. The labeling function is activated by clicking the View menu button and then the Label Contours button. The mouse cursor changes to a cross hair when this button is clicked the first time. As the mouse is moved interpolated values of the z coordinate at the mouse position are drawn in the upper left corner of the plot window. The contour plot corresponding to the z-axis values is indicated above the z-axis values as shown below.</para>
      <screen>
plot 1
z = 1.23456
</screen>
      <para>If there is more than one contour plot, the up-arrow key can be clicked to change to the next contour plot. Clicking the down-arrow key changes to an earlier plot. When the cursor is positioned on or near a contour line and the left mouse button is pressed, the contour value of the nearest contour line is drawn at the mouse position. The font size of contour labels is the same as that for text. To leave this mode and return the mouse cursor to its default shape, click the Label Contours button a second time. The second method of drawing 2d contour plots uses contour lines of various colors, where the color of the contour line specifies the z-axis value. A color axis is drawn to the right of the plot showing the relationship between plotted colors and z-axis values.</para>
      <para>The <literal>"mesh"</literal> plot type is supported for 3d axes. The data formats for <literal>"color"</literal>, <literal>"contour"</literal>, and <literal>"mesh"</literal> plots are the same and are described in the section on data files.</para>
    </sect1>

    <sect1 label="">
      <title>2.4 <literal>plot_style</literal></title>
      <para>The keyword, <literal>plot_style</literal>, specifies how the plot is to be drawn and has one, two, or three parameters. The following sections will describe <literal>plot_style</literal> parameters for each plot type.</para>

      <sect2 label="">
        <title>2.4.1 2d points plot type</title>
        <para>For <literal>"points"</literal> plot types the first <literal>plot_style</literal> parameter is a character specifying the line or symbol used for plotting and is one of the following:</para>
        <screen>
character   line/symbol

    l       solid line
    d       dashed line
    .       dotted line
    c       circle, unfilled
    C       circle, filled
    t       triangle, unfilled
    T       triangle, filled
    s       square, unfilled
    S       square, filled
    i       diamond, unfilled
    I       diamond, filled
    p       pentagon, unfilled
    P       pentagon, filled
    h       hexagon, unfilled
    H       hexagon, filled
    +       plus sign
    x       multiplication sign
    r       star, 5 points
    a       asterisk, 6 points
</screen>
        <para>The second parameter is a character or hexadecimal number specifying line or symbol color. Following is a list of the color characters used by GSEGrafix, the corresponding color names used by web browsers, and the hexadecimal rgb (red, green, blue) color numbers:</para>
        <informalfigure>
          <mediaobject><imageobject><imagedata fileref="./figures/color_characters.png" format="PNG"></imagedata></imageobject><textobject><literallayout>color_characters.png
</literallayout></textobject></mediaobject>
        </informalfigure>
        <para>If it is desired to use a color other than one of those above, then a hexadecimal rgb number can be used. The rgb number must be preceded by 0x or 0X in the parameter file to distinguish it as a hexadecimal value, and an additional pair of hexadecimal digits must be added to specify the alpha value (opaqueness) of the color. The opaqueness of the color increases as the alpha value increases. If alpha = 0x00, the color is completely transparent (no color at all). If alpha = 0xFF, the color is opaque. For example, to specify translucent red an alpha value of 0xC0 might be used. The hexadecimal color number in the parameter file would then be 0xFF0000C0. All colors specified with a color character (kaswrylqbfmogtnp) are opaque (alpha = 0xFF). Further information on color specification is given below.</para>
        <para>An optional integer third parameter may be added to specify line width or symbol size. The default line width is 1, and the default symbol size is 6. Shown below are lines and symbols for line widths of 1, 3, and 5 and symbol sizes of 6, 8, and 10:</para>
        <informalfigure>
          <mediaobject><imageobject><imagedata fileref="./figures/symbols.png" format="PNG"></imagedata></imageobject><textobject><literallayout>symbols.png
</literallayout></textobject></mediaobject>
        </informalfigure>
        <para>See Examples 1, 2, 3, and 5 below.</para>
      </sect2>

      <sect2 label="">
        <title>2.4.2 2d histogram plot type</title>
        <para>For <literal>histogram"</literal> plot types the first <literal>plot_style</literal> parameter specifies whether lines or bars are used for plotting and is one of the following:</para>
        <screen>
l (solid line)
b (bar, unfilled)
B (bar, filled)
</screen>
        <para>The second parameter is a character or hexadecimal number specifying line or bar color and is defined in the same ways as for line and symbol color above.</para>
        <para>An optional integer third parameter may be added to specify line width if lines, rather than bars, have been chosen for plotting. The default value is 1. See Example 4 below.</para>
      </sect2>

      <sect2 label="">
        <title>2.4.3 2d contour plot type</title>
        <para>For 2d <literal>"contour"</literal> plot types the first <literal>plot_style</literal> parameter is a character or hexadecimal number specifying contour-line color (for constant-color contour lines) or "auto" to specify varying contour-line colors. An optional second integer parameter can be used to specify contour line-width. The default value for line width is 1. See Example 9 below.</para>
      </sect2>

      <sect2 label="">
        <title>2.4.4 2d color plot type</title>
        <para>For <literal>"color"</literal> plot types the first <literal>plot_style</literal> parameter must be either <literal>"nearest"</literal> or <literal>"bilinear"</literal> to specify how colors are to be calculated. The parameter, <literal>"nearest"</literal>, specifies nearest-neighbor interpolation to calculate pixel color. The parameter, <literal>"bilinear"</literal>, specifies bilinear interpolation to calculate pixel color.</para>
        <para>Optional second and third parameters can be added to specify z-axis values below or above which colors will be black or white, respectively. See Examples 10 and 11 below.</para>
      </sect2>

      <sect2 label="">
        <title>2.4.5 3d points plot type</title>
        <para>The <literal>plot_style</literal> parameters for 3d points plot types are the same as for 2d points plot types. See Example 6 below.</para>
      </sect2>

      <sect2 label="">
        <title>2.4.6 3d contour plot type</title>
        <para>For 3d <literal>"contour"</literal> plot types two <literal>plot_style</literal> parameters are used to specify color information. The first parameter specifies the color of the upper surface of the plot, and the second parameter specifies the color of the lower surface. Any color character listed above may be specified for either of the fill colors, with the addition of x, which specifies that the color is transparent (alpha = 0x00). Hexadecimal color values may also be used for either or both parameters. The default contour-line color is black if the background_color is white (the default value) and is white if the background_color is black. Contour-line color may be changed by using the <literal>contour_color</literal> keyword described below. See Example 8 below.</para>
      </sect2>

      <sect2 label="">
        <title>2.4.7 3d color plot type</title>
        <para>For 3d <literal>"color"</literal> plot types a single parameter, <literal>"auto"</literal>, specifies that the colors of the plotted surface are a function of z-axis values. The colors range from blue (for the minimum z-axis value) through cyan, green, yellow, and red (for the maximum z-axis value). An optional second parameter can be added to specify the alpha value of these colors. The alpha value must be specified as a two-digit hexadecimal number preceded by 0x or 0X, such as 0xC0. When alpha is less than 0xFF, it is possible to see the axes through the plotted surface, or perhaps a plotted line below the surface. However, hidden parts of the plotted surface cannot be seen regardless of the value of alpha; they are not drawn in 3d color plots as they are in 3d mesh plots (Example 7). Only parts of the plotted surface that are not blocked by other parts of the surface are drawn and are visible. The default value for alpha is 0xFF (opaque).</para>
        <para>This plot type uses bilinear interpolation between x and y values, which specify the data grid, to calculate corresponding additional values of z. The default interpolation procedure divides each interval in x and y data into 20 additional intervals. An example is:</para>
        <screen>
original x values:         0 1 2 3 4 4.5 5.0 5.5 6 7 8 9 10
no. original x values:     nx = 13
interpolated x values:     0 0.05 0.10 ... 4 4.025 4.050 ...
                           6 6.05 6.10 ... 10
no. interpolated x values: nx_interp = 20*(nx - 1) + 1 = 241
</screen>
        <para>Dividing each interval in the original x and y data into 20 additional intervals may not be enough to calculate z values for every pixel in the surface to be displayed. It may be adequate for relatively smooth surfaces. If there are areas where z changes rapidly, more interpolated values may be needed. Regions of the original x and y data with intervals smaller than the rest of the data will continue to have smaller intervals than the rest of the data after interpolation. The keyword, <literal>ninterp</literal> can be used to specify a higher (or lower) number of interpolated values.</para>
      </sect2>

      <sect2 label="">
        <title>2.4.8 3d mesh plot type</title>
        <para>For 3d <literal>"mesh"</literal> plot types two plot_style parameters are used to specify color information as described above for 3d contour plot types, or a single parameter, <literal>"auto"</literal>, can be used to specify that the colors of both upper and lower surfaces are a function of z-axis values. The colors range from blue (for the minimum z-axis value) through cyan, green, yellow, and red (for the maximum z-axis value). The default mesh color is black if the background_color is white (the default value) and is white if the background_color is black. Mesh color may be changed by using the <literal>mesh_color</literal> keyword described below.</para>
        <para>When the parameter, <literal>"auto"</literal>, is used, an optional second parameter can be added to specify the alpha value of these colors. The alpha value must be specified as a two-digit hexadecimal number preceded by 0x or 0X, such as 0xC0. The default value for alpha is 0xFF (opaque). See Example 7 below.</para>
      </sect2>
    </sect1>

    <sect1 label="">
      <title>2.5 <literal>axis_type</literal></title>
      <para>The keyword, <literal>axis_type</literal>, specifies the type of axes to be drawn. The possible parameters are:</para>
      <screen>
"linear"     (points, histogram, contour, and color plot types)
"semilogx"   (points plot type only)
"semilogy"   (points plot type only)
"loglog"     (points plot type only)
"polar"      (points plot type only)
"3d"         (points, contour, color, and mesh plot types)
</screen>
    </sect1>

    <sect1 label="">
      <title>2.6 <literal>axis_scale</literal></title>
      <para>(Linear axes and points plot type only)</para>
      <para>The keyword, <literal>axis_scale</literal>, specifies the relationship between the plot axes and the data. The possible parameters are:</para>
      <screen>
"auto"
"equal"
</screen>
      <para>The auto axis scale means that axis tick-mark values are chosen to be "nice" values with increments between tick marks equal to 1, 2, or 5 (times the appropriate power of 10) and tick-mark values equal to integer multiples of these increments. The equal axis scale means that axis tick-mark values are still "nice," but axis minimum and maximum values are chosen so that equal distances on each axis correspond to equal changes in coordinate values. The default parameter for <literal>axis_scale</literal> is <literal>"auto"</literal>. See Example 2 for use of the equal axis scale.</para>
    </sect1>

    <sect1 label="">
      <title>2.7 <literal>axis_limits</literal></title>
      <para>The keyword, <literal>axis_limits</literal>, specifies minimum and maximum values of axes which override axis limits automatically calculated from the data. Four values must be specified for all plots displaying only x and y data (two-dimensional points plots, including polar plots and histograms). Six values must be specified for plots displaying x, y, and z data (two-dimensional contour and color plots and three-dimensional points, contour, and mesh plots). If fewer changes need to be specified, the missing values must be indicated with an asterisk (*). In polar plots theta (angle) coordinates are analogous to x coordinates in rectangular plots, and r (radial) coordinates are analogous to y coordinates in rectangular plots. Theta coordinates always vary from 0 to 360 degrees so that theta limits cannot be changed; only radial axis limits can be changed. When using the <literal>axis_limits</literal> keyword with polar plots, the radial axis limits must be specified the same way y-axis limits are specified for rectangular plots. The formats for <literal>axis_limits</literal> parameters are then:</para>
      <screen>
xmin xmax ymin ymax (rectangular plots displaying 2d data)
</screen>
      <para>or:</para>
      <screen>
* * rmin rmax (polar plots)
</screen>
      <para>or:</para>
      <screen>
xmin xmax ymin ymax zmin zmax (plots displaying 3d data)
</screen>
      <para>See Examples 2, 5, 8, 9 and 10 below.</para>
      <para>If the <literal>axis_scale</literal> keyword is used with a parameter of <literal>"auto"</literal> (the default parameter), then use of the <literal>axis_limits</literal> keyword will result in axis limits with the specified values. If the <literal>axis_scale</literal> keyword is used with a parameter of <literal>"equal"</literal>, then use of the <literal>axis_limits</literal> keyword must be consistent with <literal>"equal"</literal> axes or it may not have the desired effect. The ratio of the vertical to horizontal dimensions of the plot box for two-dimensional plots is 3 to 4. If complete axis limits, such as:</para>
      <screen>
axis_limits   0 4 0 3
</screen>
      <para>are specified, then the plot axes will have these limits (a 3-to-4 axis ratio is requested). If limits such as 0 4 0 2 are specified, the resulting plot axis limits will be 0 4 -0.5 2.5. If limits such as 0 3 0 3 are specified, the resulting plot axis limits will be -0.5 3.5 0 3. To maintain the required 3-to-4 ratio for equal axes, the axis limits are always expanded, never reduced; and the axis limits are chosen to center the mean value of the specified limits.</para>
    </sect1>

    <sect1 label="">
      <title>2.8 <literal>view3d</literal></title>
      <para>(3d plots only)</para>
      <para>The keyword, <literal>view3d</literal>, specifies the azimuth and elevation of the view direction for three-dimensional plots. The first parameter, azimuth, is the angle of the view direction measured counterclockwise from the x axis in the x-y plane. The second parameter, elevation, is the angle of the view direction measured up from the x-y plane. Both positive and negative azimuth values are allowed, but elevation may vary only from 0 to 90 degrees (0 ≤ elevation ≤ 90 deg). The default values for view3d are azimuth = 30 degrees and elevation = 30 degrees. See Examples 6, 7, and 8, below.</para>
    </sect1>

    <sect1 label="">
      <title>2.9 <literal>minor_ticks</literal></title>
      <para>The keyword, <literal>minor_ticks</literal>, specifies whether minor tick marks are drawn on all axes or not. It has two possible parameters, <literal>"on"</literal> and <literal>"off"</literal>. The default parameter for <literal>minor_ticks</literal> is <literal>"off"</literal>. See Examples 1, 3, 5, 7, and 9, below.</para>
    </sect1>

    <sect1 label="">
      <title>2.10 <literal>grid</literal></title>
      <para>The keyword, <literal>grid</literal>, specifies whether grid lines should be drawn and how they should be drawn. If grid lines should be drawn, there are two parameters. The first parameter is a character specifying whether grid lines are solid, dashed, or dotted:</para>
      <screen>
l (solid lines)
d (dashed lines)
. (dotted lines)
</screen>
      <para>The second parameter is a character or hexadecimal number specifying line color. The color characters are the same as those used for the plot_style parameter. If it is desired to use a color other than one of those specified by color characters, then a hexadecimal rgb number may be used. These are also described in the plot_style section. If the single parameter, <literal>"off"</literal>, is used, then grid lines will not be drawn. The default parameter for <literal>grid</literal> is <literal>"off"</literal>.</para>
    </sect1>

    <sect1 label="">
      <title>2.11 <literal>xlabel</literal>, ...</title>
      <para>The keywords, <literal>xlabel</literal>, <literal>ylabel</literal>, <literal>zlabel</literal>, and <literal>title</literal>, specify the labels for each of the axes and the title of the plot. For polar plots <literal>xlabel</literal> refers to the angle (theta) values, and <literal>ylabel</literal> refers to the radial (r) values. The escape sequence, \n, may be inserted in any of these strings to create additional lines. However, if font sizes are large, there may not be enough room in the plot window to display additional lines.</para>
    </sect1>

    <sect1 label="">
      <title>2.12 <literal>bin_width</literal></title>
      <para>(Histograms only)</para>
      <para>The keyword, <literal>bin_width</literal>, specifies the histogram bin width (width of the plotted bars). If no bin width is specified, a theoretical value is used. Two formulas for bin-width estimation are:</para>
      <screen>
bin_width = 3.49*sigma/N^(1/3)    Scott1
bin_width = 2*(Q3 - Q1)/N^(1/3)   Freedman, Diaconis2
</screen>
      <para>The Scott formula is based on the gaussian (normal) distribution and uses the sample standard deviation and number of samples. The Freedman-Diaconis formula is based on the interquartile range and number of samples. Q1 and Q3 are the first and third quartile values, respectively. The Freedman-Diaconis formula is used as the default bin-width estimate.</para>
      <para>References:</para>
      <orderedlist numeration="arabic">
        <listitem>
          <para>David W. Scott, "On Optimal and Data-based Histograms," <citetitle>Biometrika</citetitle>, <emphasis role="bold">66</emphasis>, 605-610, 1979.</para>
        </listitem>
        <listitem>
          <para>David Freedman and Persi Diaconis, "On the Histogram as a Density Estimator: L_2 Theory," <citetitle>Zeitschrift für  Wahrscheinlichkeitstheorie und Verwandte Gebiete</citetitle>, <emphasis role="bold">57</emphasis>, 453-476, 1981.</para>
        </listitem>
      </orderedlist>
    </sect1>

    <sect1 label="">
      <title>2.13 <literal>bin_value</literal></title>
      <para>(Histograms only)</para>
      <para>The keyword, <literal>bin_value</literal>, specifies what quantity is to be plotted for each bin. The possible quantities are:</para>
      <screen>
"number"
"fraction"
"percent"
</screen>
      <para>The <literal>"number"</literal> bin-value means that the number of samples in each bin will be plotted. The <literal>"fraction"</literal> bin-value means that the number of samples in each bin divided by the total number of samples will be plotted. The <literal>"percent"</literal> bin-value means that 100 times the number of samples in each bin divided by the total number of samples will be plotted. The default parameter for <literal>bin_value</literal> is <literal>"percent"</literal>.</para>
    </sect1>

    <sect1 label="">
      <title>2.14 <literal>bin_ref</literal></title>
      <para>(Histograms only)</para>
      <para>The keyword, <literal>bin_ref</literal>, specifies a histogram bin reference. The possible values are:</para>
      <screen>
"mean"
"zero"
"integers"
</screen>
      <para>The <literal>"mean"</literal> bin-reference means that a bin will be centered on the sample mean, and enough bins will be added below and above that bin to include all sample values. The <literal>"zero"</literal> bin-reference assumes that all sample values are necessarily greater than or equal to zero and makes the lowest bin start at 0. The <literal>"integers"</literal> bin-reference assumes that all sample values are integers and centers bins on consecutive integers from the minimum sample value to the maximum sample value. The bin width for this bin reference is set to 1. This case may be useful if, for example, the frequency of occurrence of various pixel intensities in an image is of interest. The intensity values might then be integers from 0 to 255. The default parameter for <literal>bin_ref</literal> is <literal>"mean"</literal>.</para>
    </sect1>

    <sect1 label="">
      <title>2.15 <literal>ninterp</literal></title>
      <para>(3d color plots only)</para>
      <para>The keyword, <literal>ninterp</literal>, specifies the number of additional intervals into which x and y data are divided. The default value is 20. For example, if x and y data have 10 intervals (11 values), then 20 additional intervals between each pair of x values and each pair of y values results in a total of 201 interpolated x and y values. See the discussion for the 3d color plot type.</para>
    </sect1>

    <sect1 label="">
      <title>2.16 <literal>contours</literal></title>
      <para>(Contour plots only)</para>
      <para>The keyword, <literal>contours</literal>, specifies the number of contour lines to be drawn. The default number is:</para>
      <screen>
2*nzticks - 1
</screen>
      <para>where nzticks is the number of tick marks on the z axis. Contour lines are drawn for each tick-mark value on the z axis plus values half way between each pair of tick marks. If a number greater than one is specified using the <literal>contours</literal> keyword, then that number of equally-spaced contour lines will be drawn beginning with the minimum z-axis tick-mark value and ending with the maximum z-axis tick-mark value. See Examples 8 and 9 below.</para>
    </sect1>

    <sect1 label="">
      <title>2.17 <literal>contour_color</literal></title>
      <para>(3d contour plots only)</para>
      <para>The keyword, <literal>contour_color</literal>, specifies the color of contour lines in three-dimensional contour plots. The color can be specified using one of the color characters described in the plot_style section, or it can be specified using rgba values as also described in the plot_style section. The default color is black if the background_color is white (the default value) and is white if the background_color is black.</para>
    </sect1>

    <sect1 label="">
      <title>2.18 <literal>mesh_color</literal></title>
      <para>(3d mesh plots only)</para>
      <para>The keyword, <literal>mesh_color</literal>, specifies the color of mesh lines in three-dimensional mesh plots. The color can be specified using one of the color characters described in the plot_style section, or it can be specified using rgba values as also described in the plot_style section. The default color is black if the background_color is white (the default value) and is white if the background_color is black.</para>
    </sect1>

    <sect1 label="">
      <title>2.19 <literal>stems</literal></title>
      <para>(Points plots only)</para>
      <para>The keyword, <literal>stems</literal>, specifies that for rectangular two-dimensional points plots vertical lines (parallel to the y axis) are drawn from each data point to the x axis (minimum y value) or to a specified y value. For polar plots radial lines are drawn from each data point to the origin (minimum r value) or to a specified r value. For three-dimensional points plots vertical lines (parallel to the z axis) are drawn from each data point to the xy plane at the minimum z value or to the xy plane at a specified z value. The color of the lines will be the color specified for the corresponding plot-style keyword. The possible parameters are <literal>"on"</literal> (lines drawn to ymin, rmin, or zmin), <literal>"off"</literal> (no lines drawn), or a specific y, r, or z value. The default parameter is <literal>"off"</literal>.</para>
    </sect1>

    <sect1 label="">
      <title>2.20 <literal>rect_coords</literal></title>
      <para>(Linear axis type only)</para>
      <para>The keyword, <literal>rect_coords</literal>, specifies five coordinates, or properties, of a rectangle that is to be added to a plot. The coordinates of the rectangle are x and y coordinates of the center of the rectangle, rectangle width (long dimension) and height (short dimension), and the angle (degrees) the rectangle is to be rotated counterclockwise from the positive x axis.</para>
    </sect1>

    <sect1 label="">
      <title>2.21 <literal>rect_style</literal></title>
      <para>(Linear axis type only)</para>
      <para>The keyword, <literal>rect_style</literal>, specifies the type, color, and width of line used to draw a rectangle on a plot and is similar to the <literal>plot_style</literal> keyword. The first parameter is a character specifying the type of line used to draw the rectangle and is l for solid lines, d for dashed lines, or . for dotted lines. The second parameter is either a character or hexadecimal color value specifying line color. The line color can be specified by any of the characters listed in the plot_style section or by a hexadecimal color value. The hexadecimal color value must be preceded by 0x to distinguish it as a hexadecimal value. The line width is a positive integer whose default value is 1.</para>
    </sect1>

    <sect1 label="">
      <title>2.22 <literal>ellipse_coords</literal></title>
      <para>(Linear axis type only)</para>
      <para>The keyword, <literal>ellipse_coords</literal>, specifies five coordinates, or properties, of an ellipse that is to be added to a plot. The coordinates of the ellipse are x and y coordinates of the center of the ellipse, ellipse width (major axis) and height (minor axis), and the angle (degrees) the ellipse is to be rotated counterclockwise from the positive x axis.</para>
    </sect1>

    <sect1 label="">
      <title>2.23 <literal>ellipse_style</literal></title>
      <para>(Linear axis type only)</para>
      <para>The keyword, <literal>ellipse_style</literal>, specifies the type, color, and width of line used to draw an ellipse on a plot and is similar to the <literal>plot_style</literal> keyword. The first parameter is a character specifying the type of line used to draw the ellipse and is l for solid lines, d for dashed lines, or . for dotted lines. The second parameter is either a character or hexadecimal color value specifying line color. The line color can be specified by any of the characters listed in the plot_style section or by a hexadecimal color value. The hexadecimal color value must be preceded by 0x to distinguish it as a hexadecimal value. The line width is a positive integer whose default value is 1.</para>
    </sect1>

    <sect1 label="">
      <title>2.24 <literal>line_coords</literal></title>
      <para>The keyword, <literal>line_coords</literal>, specifies the coordinates of a line to be added to a plot. The coordinates of the end points of the line are specified as x1 x2 y1 y2 for a two-dimensional plot and as x1 x2 y1 y2 z1 z2 for a three-dimensional plot. See Example 4 below.</para>
    </sect1>

    <sect1 label="">
      <title>2.25 <literal>line_style</literal></title>
      <para>The keyword, <literal>line_style</literal>, specifies the type, color, and width of a line to be drawn on a plot and is similar to the plot_style keyword. The first parameter is a character specifying the type of line to be drawn and is l for a solid line, d for a dashed line, or . for a dotted line. The second parameter is either a character or hexadecimal color value specifying line color. The line color can be specified by any of the characters listed in the plot_style section or by a hexadecimal color value. The hexadecimal color value must be preceded by 0x to distinguish it as a hexadecimal value. The line width is a positive integer whose default value is 1. See Example 4 below.</para>
    </sect1>

    <sect1 label="">
      <title>2.26 <literal>symbol_coords</literal></title>
      <para>The keyword, <literal>symbol_coords</literal>, specifies the coordinates of a symbol to be added to a plot. The coordinates of the symbol location are specified as x y for a two-dimensional plot and as x y z for a three-dimensional plot. See Example 2 below.</para>
    </sect1>

    <sect1 label="">
      <title>2.27 <literal>symbol_style</literal></title>
      <para>The keyword, <literal>symbol_style</literal>, specifies the type (circle, triangle, square, diamond, pentagon, hexagon, +, x, star, or asterisk), color, and size of a symbol to be added to a plot and is similar to the plot_style keyword. The first parameter is a character specifying the type of symbol to be drawn and is one of the following: c (unfilled circle), C (filled circle), t (unfilled triangle), s (unfilled square), S (filled square), i (unfilled diamond), I (filled diamond), p (unfilled pentagon), P (filled pentagon), h (unfilled hexagon), H (filled hexagon), +, x, r, or a. The second parameter is either a character or hexadecimal color value specifying symbol color. The symbol color can be specified by any of the characters listed in the plot_style section or by a hexadecimal color value. The hexadecimal color value must be preceded by 0x to distinguish it as a hexadecimal value. The symbol size is a positive integer whose default value is 6. See Example 2 below.</para>
    </sect1>

    <sect1 label="">
      <title>2.28 <literal>legend_string</literal></title>
      <para>The keyword, <literal>legend_string</literal>, specifies the text string to be used in each line of the legend. There should be one line of text for each plot that is drawn. See Examples 1 and 4 below.</para>
    </sect1>

    <sect1 label="">
      <title>2.29 <literal>legend_coords_abs</literal></title>
      <para>The parameters of the keyword, <literal>legend_coords_abs</literal>, specify the absolute position of the legend anchor point using axis values. For two-dimensional plots there are two parameters (x and y), and for three-dimensional plots there are three parameters (x, y, and z).</para>
    </sect1>

    <sect1 label="">
      <title>2.30 <literal>legend_coords_rel</literal></title>
      <para>The parameters of the keyword, <literal>legend_coords_rel</literal>, specify the legend anchor point relative to the plot box. The first parameter specifies the fractional distance of the legend anchor point between the leftmost and rightmost points of the plot box. The second parameter specifies the fractional distance of the anchor point between the lowermost and uppermost points of the plot box. Values of 0.10 and 0.90 result in the anchor point being 10 percent of the width of the plot box measured from the left side of the plot box and 90 percent of the height of the plot box measured from the bottom of the plot box. Values between 0 and 1 result in the anchor point being inside the plot box. Values less than 0 and greater than 1 result in the anchor point being outside the plot box.</para>
    </sect1>

    <sect1 label="">
      <title>2.31 <literal>legend_anchor</literal></title>
      <para>The keyword, <literal>legend_anchor</literal>, specifies the direction of the legend anchor point from the legend. The possible parameters are:</para>
      <screen>
"center"
"north"
"northeast"
"east"
"southeast"
"south"
"southwest"
"west"
"northwest"
</screen>
      <para>Here <literal>"north"</literal> means the anchor point is centered directly above the legend; <literal>"east"</literal> means the anchor point is centered directly to the right of the legend; etc. All lines containing the keyword, <literal>legend_string</literal>, should immediately follow one another (no blank lines between them). The lines containing the keywords, <literal>legend_coords_abs</literal>, <literal>legend_coords_rel</literal>, and <literal>anchor_legend</literal>, should immediately follow the last line containing the keyword, <literal>legend_string</literal>.</para>
    </sect1>

    <sect1 label="">
      <title>2.32 <literal>text_string</literal></title>
      <para>The keyword, <literal>text_string</literal>, specifies lines of text which can be added to a plot. See Examples 2, 4, 5, 6, 7, and 8 below.</para>
    </sect1>

    <sect1 label="">
      <title>2.33 <literal>text_coords_abs</literal></title>
      <para>The parameters of the keyword, <literal>text_coords_abs</literal>, specify the absolute position of the text anchor point using axis values. For two-dimensional plots there are two parameters (x and y), and for three-dimensional plots there are three parameters (x, y, and z).</para>
    </sect1>

    <sect1 label="">
      <title>2.34 <literal>text_coords_rel</literal></title>
      <para>The parameters of the keyword, <literal>text_coords_rel</literal>, specify the text anchor point relative to the plot box. The first parameter specifies the fractional distance of the text anchor point between the leftmost and rightmost points of the plot box. The second parameter specifies the fractional distance of the anchor point between the lowermost and uppermost points of the plot box.</para>
    </sect1>

    <sect1 label="">
      <title>2.35 <literal>text_anchor</literal></title>
      <para>The keyword, <literal>text_anchor</literal>, specifies the direction of the text anchor point from the text. The possible parameters are:</para>
      <screen>
"center"
"north"
"northeast"
"east"
"southeast"
"south"
"southwest"
"west"
"northwest"
</screen>
      <para>Here <literal>"north"</literal> means the anchor point is centered directly above the text; <literal>"east"</literal> means the anchor point is centered directly to the right of the text; etc. All lines containing the keyword, <literal>text_string</literal>, should immediately follow one another (no blank lines between them). The lines containing the keywords, <literal>text_coords_abs</literal>, <literal>text_coords_rel</literal>, and <literal>anchor_text</literal>, should immediately follow the last line containing the keyword, <literal>text_string</literal>.</para>
    </sect1>

    <sect1 label="">
      <title>2.36 <literal>image_filename</literal></title>
      <para>The keyword, <literal>image_filename</literal>, specifies the file name of an image which can be added to a plot. See Example 1 below.</para>
    </sect1>

    <sect1 label="">
      <title>2.37 <literal>image_coords_abs</literal></title>
      <para>The parameters of the keyword, <literal>image_coords_abs</literal>, specify the absolute position of the image anchor point using axis values. For two-dimensional plots there are two parameters (x and y), and for three-dimensional plots there are three parameters (x, y, and z).</para>
    </sect1>

    <sect1 label="">
      <title>2.38 <literal>image_coords_rel</literal></title>
      <para>The parameters of the keyword, <literal>image_coords_rel</literal>, specify the image anchor point relative to the plot box. The first parameter specifies the fractional distance of the image anchor point between the leftmost and rightmost points of the plot box. The second parameter specifies the fractional distance of the anchor point between the lowermost and uppermost points of the plot box.</para>
    </sect1>

    <sect1 label="">
      <title>2.39 <literal>image_anchor</literal></title>
      <para>The keyword, <literal>image_anchor</literal>, specifies the direction of the image anchor point from the image. The possible parameters are:</para>
      <screen>
"center"
"north"
"northeast"
"east"
"southeast"
"south"
"southwest"
"west"
"northwest"
</screen>
      <para>Here <literal>"north"</literal> means the anchor point is centered directly above the image; <literal>"east"</literal> means the anchor point is centered directly to the right of the image; etc. The lines containing the keywords, <literal>image_coords_abs</literal>, <literal>image_coords_rel</literal>, and <literal>image_anchor</literal>, should immediately follow the line containing the keyword, <literal>image_string</literal> (no blank lines between them).</para>
    </sect1>

    <sect1 label="">
      <title>2.40 <literal>date_time</literal></title>
      <para>The keyword, <literal>date_time</literal>, specifies whether a date-and-time string should be drawn in the window and where. Its only parameter specifies the location of the date-time string. If the parameter is <literal>"off"</literal>, then the date-time string will not be drawn. The possible parameters are:</para>
      <screen>
"north"
"northeast"
"southeast"
"south"
"southwest"
"northwest"
"off"
</screen>
      <para>Here <literal>"north"</literal> means the date-time string is centered at the upper edge of the window; <literal>"northeast"</literal> means the string is in the upper right corner of the window; etc. The default parameter for date_time is <literal>"off"</literal>. See Example 1 below.</para>
    </sect1>

    <sect1 label="">
      <title>2.41 <literal>save</literal></title>
      <para>The keyword, <literal>save</literal>, specifies that the plot should be saved as an image file immediately after the plot is drawn. Its only parameter specifies the image file name (and path) to use. The file name must have an extension which indicates the image file format. The supported image file formats are bmp (Windows Bitmap), jpeg (Joint Photographic Experts Group), and png (Portable Network Graphics).</para>
    </sect1>

    <sect1 label="">
      <title>2.42 <literal>save_close</literal></title>
      <para>The keyword, <literal>save_close</literal>, specifies that the plot should be saved as an image file immediately after the plot is drawn, and then the plot window should be closed. Its only parameter specifies the image file name (and path) to use. The requirements for the image file name are the same as for the keyword, <literal>save</literal>, above.</para>
    </sect1>

    <sect1 label="">
      <title>2.43 <literal>background_color</literal></title>
      <para>The keyword, <literal>background_color</literal>, specifies the background color of the plot window. It has two possible parameters, <literal>"white"</literal> and <literal>"black"</literal>. If <literal>"black"</literal> is chosen, the plot box, tick marks, axis labels, title, and text are white. The default value is <literal>"white"</literal>.</para>
    </sect1>

    <sect1 label="">
      <title>2.44 <literal>background_image</literal></title>
      <para>(2d plots only)</para>
      <para>The keyword, <literal>background_image</literal>, specifies the file name of a background image, such as a map, to be displayed in the plot box and how it should be scaled. It has two parameters, the background-image file name and the background-image style, which specifies scaling of the image. The background-image style has four possible values:</para>
      <screen>
"center"
"fill"
"scale"
"zoom"
</screen>
      <para>The first value, <literal>"center"</literal>, means that the image is centered in the plot box, and as much of it is displayed as possible with no scaling. The second value, <literal>"fill"</literal>, means that the image is scaled in both the horizontal and vertical directions so that it fills the plot box. The third value, <literal>"scale"</literal>, means that the image is scaled the same amount in both directions so that the entire image is contained in the plot box and fills the plot box in at least one direction. The fourth value, <literal>"zoom"</literal>, means that the image is scaled the same amount in both directions so that it fills the plot box in at least one direction and overflows, but is clipped, in the other direction. The default value for background-image style is <literal>"fill"</literal>.</para>
    </sect1>

    <sect1 label="">
      <title>2.45 <literal>window_size</literal></title>
      <para>The keyword, <literal>window_size</literal>, takes two integer parameters which specify the width and height of the plot window in pixels. The default values are 768 (width), and 576 (height).</para>
    </sect1>

    <sect1 label="">
      <title>2.46 <literal>plot_box</literal></title>
      <para>The keyword, <literal>plot_box</literal>, specifies whether the box surrounding the plot is drawn or not. It has two possible parameters, <literal>"on"</literal> and <literal>"off"</literal>. The default parameter for <literal>plot_box</literal> is <literal>"on"</literal>.</para>
    </sect1>

    <sect1 label="">
      <title>2.47 <literal>x_tick_marks</literal>, ...</title>
      <para>The keywords, <literal>x_tick_marks</literal>, <literal>y_tick_marks</literal>, and <literal>z_tick_marks</literal>, specify whether tick marks are drawn for each axis. They have two possible parameters, <literal>"on"</literal> and <literal>"off"</literal>. The default parameters are <literal>"on"</literal>.</para>
    </sect1>

    <sect1 label="">
      <title>2.48 <literal>x_tick_labels</literal>, ...</title>
      <para>The keywords, <literal>x_tick_labels</literal>, <literal>y_tick_labels</literal>, and <literal>z_tick_labels</literal>, specify whether labels are drawn at each tick mark for each axis. They have two possible parameters, <literal>"on"</literal> and <literal>"off"</literal>. The default parameters are <literal>"on"</literal>.</para>
    </sect1>

    <sect1 label="">
      <title>2.49 <literal>font_name</literal></title>
      <para>The keyword, <literal>font_name</literal>, specifies the font name, or family, to be used in labeling the plot. The default font is <literal>"Sans"</literal>.</para>
    </sect1>

    <sect1 label="">
      <title>2.50 <literal>font_size_date_time</literal>, ...</title>
      <para>The keywords, <literal>font_size_date_time</literal>, <literal>font_size_legend</literal>, <literal>font_size_text</literal>, <literal>font_size_tick_labels</literal>, <literal>font_size_axis_labels</literal>, and <literal>font_size_title</literal>, specify font sizes, in pixels, of the date-time string, legend, text, tick-mark labels, axis labels, and plot title, respectively. Default font sizes are:</para>
      <screen>
date-time string: 12
legend:           12
text:             12
tick-mark labels: 14
axis labels:      16
plot title:       18
</screen>
      <para><indexterm role="cp"><primary>keyword descriptions</primary></indexterm><indexterm role="cp"><primary>parameter descriptions</primary></indexterm></para>
    </sect1>
  </chapter>

  <chapter label="" xreflabel="3 Keyword summary" id="Keyword-summary">
    <title>3 Keyword summary</title>
    <para>Following is a list of keywords and example parameters. Where specific parameters must be used, the possible parameters are listed in braces, {}. Default values are in <emphasis role="bold">bold</emphasis>. Descriptions of each keyword are in the Parameter file section. A printable <ulink url="./help_files/keyword_summary.pdf">one-page version</ulink> of this keyword summary can be used as a reference.</para>
    <screen>
file_name               "/home/sab/gsegrafix/data_files/sinc.txt"
file_format             "%lf %lf"

plot_type               {"points" "histogram" "contour" "color" "mesh"}

# 2d points plot type:
plot_style              {ld.cCtTsSiIpPhH+xra} {kaswrylqbfmogtnp} <emphasis role="bold">1</emphasis> or <emphasis role="bold">6</emphasis>

# 2d histogram plot type:
plot_style              {lbB} {kaswrylqbfmogtnp} <emphasis role="bold">1</emphasis>

# 2d contour plot type:
plot_style              {"auto"} <emphasis role="bold">1</emphasis>   or   {kaswrylqbfmogtnp} <emphasis role="bold">1</emphasis>

# 2d color plot type:
plot_style              {"nearest" "bilinear"} zblack zwhite

# 3d points plot type:
plot_style              {ld.cCtTsSiIpPhH+xra} {kaswrylqbfmogtnp} <emphasis role="bold">1</emphasis> or <emphasis role="bold">6</emphasis>

# 3d contour plot type:
plot_style              {kaswrylqbfmogtnpx} {kaswrylqbfmogtnpx}

# 3d color plot type:
plot_style              {"auto"} <emphasis role="bold">0xFF</emphasis>

# 3d mesh plot type:
plot_style              {"auto"} <emphasis role="bold">0xFF</emphasis>   or
                        {kaswrylqbfmogtnpx} {kaswrylqbfmogtnpx}

axis_type               {"linear" "semilogx" "semilogy" "loglog"
                         "polar" "3d"}

axis_scale              {<emphasis role="bold">"auto"</emphasis> "equal"}

# rectangular plots displaying 2d data:
axis_limits             xmin xmax ymin ymax

# polar plots:
axis_limits             * * rmin rmax

# plots displaying 3d data:
axis_limits             xmin xmax ymin ymax zmin zmax

# 3d axis type:
view3d                  <emphasis role="bold">30</emphasis> <emphasis role="bold">30</emphasis>

minor_ticks             {"on" <emphasis role="bold">"off"</emphasis>}

grid                    {ld.} {kaswrylqbfmogtnp}   or   <emphasis role="bold">"off"</emphasis>

xlabel                  "x axis"
ylabel                  "y axis"
zlabel                  "z axis"
title                   "Figure 1"

# histogram plot type:
bin_width               1.23
bin_value               {"number" "fraction" <emphasis role="bold">"percent"</emphasis>}
bin_ref                 {<emphasis role="bold">"mean"</emphasis> "zero" "integers"}

# 3d color plot type:
ninterp                 <emphasis role="bold">20</emphasis>

# contour plot type:
contours                25

# 3d contour plot type:
contour_color           {<emphasis role="bold">k</emphasis>aswrylqbfmogtnp}

# 3d mesh plot type:
mesh_color              {<emphasis role="bold">k</emphasis>aswrylqbfmogtnp}

# points plot type:
stems                   {"on" <emphasis role="bold">"off"</emphasis>}   or   0.0

# linear axis type:
rect_coords             x0 y0 width height angle
rect_style              {ld.} {kaswrylqbfmogtnp} <emphasis role="bold">1</emphasis>
ellipse_coords          x0 y0 width height angle
ellipse_style           {ld.} {kaswrylqbfmogtnp} <emphasis role="bold">1</emphasis>

line_coords             x1 x2 y1 y2   or   x1 x2 y1 y2 z1 z2
line_style              {ld.} {kaswrylqbfmogtnp} <emphasis role="bold">1</emphasis>

symbol_coords           x1 y1   or   x1 y1 z1
symbol_style            {cCtTsSiIpPhH+xra} {kaswrylqbfmogtnp} <emphasis role="bold">6</emphasis>

legend_string           "data"
legend_coords_abs       x1 y1   or   x1 y1 z1
legend_coords_rel       xr yr
legend_anchor           {"center" "north" "northeast" "east" "southeast"
                         "south" "southwest" "west" "northwest"}

text_string             "Measurements made 1 January 2008"
text_coords_abs         x1 y1   or   x1 y1 z1
text_coords_rel         xr yr
text_anchor             {"center" "north" "northeast" "east" "southeast"
                         "south" "southwest" "west" "northwest"}

image_filename          "/home/sab/gsegrafix/image_files/tux.png"
image_coords_abs        x1 y1   or   x1 y1 z1
image_coords_rel        xr yr
image_anchor            {"center" "north" "northeast" "east" "southeast"
                         "south" "southwest" "west" "northwest"}

date_time               {"north" "northeast" "southeast" "south"
                         "southwest" "northwest" <emphasis role="bold">"off"</emphasis>}

save                    "/home/sab/gsegrafix/plot.png"
save_close              "/home/sab/gsegrafix/plot.png"

background_color        {<emphasis role="bold">"white"</emphasis> "black"}
background_image        "/home/sab/gsegrafix/image_files/map.png"
                        {"center" <emphasis role="bold">"fill"</emphasis> "scale" "zoom"}

window_size             <emphasis role="bold">768</emphasis> <emphasis role="bold">576</emphasis>

plot_box                {<emphasis role="bold">"on"</emphasis> "off"}

x_tick_marks            {<emphasis role="bold">"on"</emphasis> "off"}
y_tick_marks            {<emphasis role="bold">"on"</emphasis> "off"}
z_tick_marks            {<emphasis role="bold">"on"</emphasis> "off"}

x_tick_labels           {<emphasis role="bold">"on"</emphasis> "off"}
y_tick_labels           {<emphasis role="bold">"on"</emphasis> "off"}
z_tick_labels           {<emphasis role="bold">"on"</emphasis> "off"}

font_name               <emphasis role="bold">"Sans"</emphasis>

font_size_date_time     <emphasis role="bold">12</emphasis>
font_size_legend        <emphasis role="bold">12</emphasis>
font_size_text          <emphasis role="bold">12</emphasis>
font_size_tick_labels   <emphasis role="bold">14</emphasis>
font_size_axis_labels   <emphasis role="bold">16</emphasis>
font_size_title         <emphasis role="bold">18</emphasis>
</screen>
    <para>Notes:</para>
    <orderedlist numeration="arabic">
      <listitem>
        <para>x1, x2, y1, y2, z1, z2 represent absolute coordinate values with respect to axis values.</para>
      </listitem>
      <listitem>
        <para>xr, yr represent relative coordinate values with respect to plot-box limits.
xr = 0, yr = 0 refers to lower left corner of plot box; xr = 1, yr = 1 refers to upper
right corner of plot box.</para>
      </listitem>
      <listitem>
        <para>For 2d and 3d points plot types the default value of the optional third plot_style
parameter is 1 for line width or 6 for symbol size.</para>
      </listitem>
      <listitem>
        <para>For histogram plot types the optional third plot_style parameter applies only if lines,
rather than bars, are used for plotting.</para>
      </listitem>
      <listitem>
        <para>The default value of the optional third line_style parameter, line width, is 1.</para>
      </listitem>
      <listitem>
        <para>The default value of the optional third symbol_style parameter, symbol size, is 6.</para>
      </listitem>
      <listitem>
        <para>Hexadecimal color specifications may be used instead of the listed color characters.
The color value must be preceded by 0x or 0X and must include the alpha value
(e.g., 0xD0723EFF, opaque copper).</para>
      </listitem>
    </orderedlist>
    <para><indexterm role="cp"><primary>keyword-parameter summary</primary></indexterm></para>
  </chapter>

  <chapter label="" xreflabel="4 Data files" id="Data-files">
    <title>4 Data files</title>
    <sect1 label="">
      <title>4.1 2d points plots</title>
      <sect2 label="">
        <title>4.1.1 Rectangular coordinates</title>
        <para>The data file for a two-dimensional points plot contains columns of numbers. The <literal>file_format</literal> parameters specify which columns are used as x and y coordinates of plotted points. The column used for x coordinates must precede the column used for y coordinates, but the two columns do not have to be next to each other. All columns must be the same length. For <literal>"semilogx"</literal>, <literal>"semilogy"</literal>, and <literal>"loglog"</literal> axes the logarithms of the absolute values of the data are plotted. More than one curve or line can be plotted using one pair of columns of numbers by inserting asterisks (*) in each of the two columns where one curve ends and the next one begins. An example is:</para>
        <screen>
0.00  0.00
0.20  0.04
0.40  0.16
0.60  0.36
   *     *
1.00  1.00
1.20  1.44
1.40  1.96
1.60  2.56
1.80  3.24
   *     *
2.40  5.76
2.60  6.76
2.80  7.84
</screen>
        <para>The data above would result in three curves being plotted, the first with 4 points, the second with 5 points, and the third with 3 points. If a data file contains more than two columns of numbers and if columns containing asterisks are not being plotted, the format for each of these columns should be <literal>"%*s"</literal> so that both numbers and asterisks will be recognized. An example is:</para>
        <screen>0.00  0.00  0.000  0.000
0.20  0.04  0.100  0.001
0.40  0.16  0.200  0.008
0.60  0.36  0.300  0.027
   *     *  0.400  0.064
1.00  1.00  0.500  0.125
1.20  1.44  0.600  0.216
1.40  1.96  0.700  0.343
1.60  2.56  0.800  0.512
1.80  3.24  0.900  0.729
   *     *  1.000  1.000
2.40  5.76  1.100  1.331
2.60  6.76  1.200  1.728
2.80  7.84  1.300  2.197
</screen>
        <para>The format for plotting column 4 as a function of column 3 would be <literal>"%*s %*s %lf %lf"</literal>. See Examples 1, 2, and 3 below.</para>
      </sect2>

      <sect2 label="">
        <title>4.1.2 Polar coordinates</title>
        <para>The data file for a polar plot contains columns of numbers. The <literal>file_format</literal> parameters specify which columns are used as theta and r coordinates of plotted points. The column used as theta coordinates must precede the column used for r coordinates, but the two columns do not have to be next to each other. All columns must be the same length. The units of theta coordinates must be in radians. As is the case for two-dimensional plots with rectangular coordinates, more than one curve or line can be plotted using one pair of columns of numbers by inserting asterisks (*) in each of the two columns where one curve ends and the next one begins. See Example 5 below.</para>
      </sect2>
    </sect1>

    <sect1 label="">
      <title>4.2 Histograms</title>
      <para>The data file for a histogram need contain only one column of numbers. If the file contains more than one column, the <literal>file_format</literal> parameters specify which column to use. All columns must be the same length. See Example 4 below.</para>
    </sect1>

    <sect1 label="">
      <title>4.3 3d points plots</title>
      <para>The data file for a three-dimensional points plot contains columns of numbers. The <literal>file_format</literal> parameters specify which columns are used as x, y, and z coordinates of plotted points. The column used as x coordinates must precede the column used as y coordinates, and the column used as y coordinates must precede the column used as z coordinates. However, the three columns do not have to be next to each other. All columns must be the same length. More than one curve or line can be plotted using three columns of numbers by inserting asterisks (*) in each of the three columns where one curve ends and the next one begins. See Example 6 below.</para>
    </sect1>

    <sect1 label="">
      <title>4.4 Contour, color, and mesh plots</title>
      <para>Data files for three-dimensional <literal>"contour"</literal>, <literal>"color"</literal>, and <literal>"mesh"</literal> plots and two-dimensional <literal>"contour"</literal> and <literal>"color"</literal> plots are the same. The first line contains two numbers, the number of x coordinates, nx, and the number of y coordinates, ny. The second line contains the nx values of the x coordinates. The third line contains the ny values of the y coordinates. The remainding lines contain the values of the z coordinates for pairs of x and y coordinates. The z-coordinate data is arranged in a matrix so that the row number corresponds to the index of the x coordinate and the column number corresponds to the index of the y coordinate. The complete data file looks like the following:</para>
      <screen>
     nx      ny
   x(1)    x(2)    x(3) ...    x(i) ...    x(nx)
   y(1)    y(2)    y(3) ...    y(j) ...    y(ny)
 z(1,1)  z(1,2)  z(1,3) ...  z(1,j) ...  z(1,ny)
 z(2,1)  z(2,2)  z(2,3) ...  z(2,j) ...  z(2,ny)
 z(3,1)  z(3,2)  z(3,3) ...  z(3,j) ...  z(3,ny)
                        ...
 z(i,1)  z(i,2)  z(i,3) ...  z(i,j) ...  z(i,ny)
                        ...
z(nx,1) z(nx,2) z(nx,3) ... z(nx,j) ... z(nx,ny)
</screen>
      <para>Data files such as this can be written by calling an Octave function such as <ulink url="./help_files/data_save.txt">data_save</ulink> or a C function such as <ulink url="./help_files/data_C_save.txt">data_C_save</ulink>. See Examples 7, 8, 9, 10, and 11 below.</para>
      <para><indexterm role="cp"><primary>data-file specifications</primary></indexterm></para>
    </sect1>
  </chapter>

  <chapter label="" xreflabel="5 Operation" id="Operation">
    <title>5 Operation</title>
    <sect1 label="">
      <title>5.1 Running GSEGrafix from terminal window</title>
      <para>As described in the Introduction GSEGrafix can be run from a terminal command line by using the gsegrafix command:</para>
      <screen>
$ gsegrafix &amp;
</screen>
      <para>The program can also be run by using either the gsegrafix or gsegraf command followed by the name of a parameter file:</para>
      <screen>$ gsegrafix /home/sab/gsegrafix/param_files/sinc_param.txt &amp;
</screen>
      <para>or:</para>
      <screen>$ gsegraf /home/sab/gsegrafix/param_files/sinc_param.txt &amp;
</screen>
      <para>This help file can be displayed by using either the gsegrafix or gsegraf command followed by -h:</para>
      <screen>$ gsegrafix -h
</screen>
      <para>or:</para>
      <screen>$ gsegraf -h
</screen>
    </sect1>

    <sect1 label="">
      <title>5.2 Running GSEGrafix from Octave program</title>
      <para>GSEGrafix can be run from an Octave program by calling an Octave function such as <ulink url="./help_files/gsegraf_plot.txt">gsegraf_plot</ulink>. This function writes a parameter file and then uses gsegraf to create the corresponding plot. The first input to the function is the name of the parameter file to be created. The remaining inputs are keyword-argument pairs to be written to the parameter file. All inputs must be strings (enclosed in double quotes) and separated by commas. If all or part of an argument needs to be quoted in the parameter file, the double-quote escape sequence (\") must be used for these additional quotes. An example of how to call gsegraf_plot is:</para>
      <screen>
gsegraf_plot("./sinc_param.txt",
             "file_name     \"./sinc.txt\"",
             "file_format   \"%lf %lf\"",
             "plot_type     \"points\"",
             "plot_style    lk",
             "axis_type     \"linear\"",
             "grid          ls",
             "xlabel        \"x axis\"",
             "ylabel        \"y axis\"",
             "title         \"sin(x)/x\"");
</screen>
    </sect1>

    <sect1 label="">
      <title>5.3 Running GSEGrafix from C program</title>
      <para>GSEGrafix can be run from a C program by calling a C function such as <ulink url="./help_files/gsegraf_C_plot.txt">gsegraf_C_plot</ulink>. As described above for an Octave function, the C function writes a parameter file and then uses gsegraf to create the corresponding plot. The only difference for calling the C function is that the list of keyword-argument pairs must be terminated with a <literal>NULL</literal> pointer:</para>
      <screen>
gsegraf_C_plot("./sinc_param.txt",
               "file_name     \"./sinc.txt\"",
               "file_format   \"%lf %lf\"",
               "plot_type     \"points\"",
               "plot_style    lk",
               "axis_type     \"linear\"",
               "grid          ls",
               "xlabel        \"x axis\"",
               "ylabel        \"y axis\"",
               "title         \"sin(x)/x\"",
               NULL);
</screen>
    </sect1>

    <sect1 label="">
      <title>5.4 Zoom capability</title>
      <para>The zoom capability works for all two-dimensional rectangular plots and histograms. To use the zoom capability click the left mouse button at one corner of the area to be expanded and drag the mouse to the opposite corner of this area. The points within the zoom rectangle will be confined within the plot border. When the left mouse button is released, the plot will be redrawn showing at least the region defined by the zoom rectangle. "Nice" tick-mark labels will be chosen. To redraw the original plot click the right mouse button in the plot window.</para>
    </sect1>

    <sect1 label="">
      <title>5.5 Save As menu button</title>
      <para>To save a plot as an image file click the File menu button and then the Save As button. A file-chooser dialog box will appear and can be used to choose the image file name. The file name must have an extension which indicates the image file format. The supported image file formats are bmp (Windows Bitmap), jpeg (Joint Photographic Experts Group), and png (Portable Network Graphics). Sample image file names are:</para>
      <screen>
plot.bmp
plot.jpeg
plot.png
</screen>
      <para>The quality parameter for jpeg files is 75.</para>
    </sect1>

    <sect1 label="">
      <title>5.6 Axis Limits menu button</title>
      <para>To change the axis limits for a plot click the View menu button and then the Axis Limits button. A dialog box can then be used to specify new axis limits. This method works for all plots. Only the r-axis limits can be changed in polar plots. To redraw the original plot click the right mouse button in the plot window.</para>
    </sect1>

    <sect1 label="">
      <title>5.7 Rotate 3d Axes menu button</title>
      <para>To change the orientation of three-dimensional plots click the View menu button and then the Rotate 3d Axes button. A dialog box can then be used to specify new azimuth and elevation angles. The reference line for the first angle, azimuth, is the projection in the x-y plane of a line out of the screen toward the viewer (perpendicular to the screen). Azimuth is the angle measured clockwise from the reference line to the positive x axis. The second angle, elevation, is the angle between a line out of the screen toward the viewer and the x-y plane. This definition results in points with positive x and y coordinates being closest to the viewer for azimuth values between 0 and 90 degrees. When both angles are zero, the positive x axis is perpendicular to the screen toward the viewer, the positive y axis is toward the right in the plane of the screen, and the positive z axis is up in the plane of the screen. Both angles are specified in degrees. To redraw the original plot click the right mouse button in the plot window.</para>
    </sect1>

    <sect1 label="">
      <title>5.8 Label Contours menu button</title>
      <para>To activate the contour-labeling function for two-dimensional contour plots click the View menu button and then the Label Contours button. The mouse cursor changes to a cross hair when this button is clicked the first time. As the mouse is moved interpolated values of the z coordinate at the mouse position are displayed in the upper left corner of the plot window when the mouse is within the area where z coordinates are available. The contour plot corresponding to the z-axis values is indicated above the z-axis values as shown below.</para>
      <screen>
contour plot 1
z = 1.23456
</screen>
      <para>If there is more than one contour plot, the up-arrow key can be clicked to change to the next contour plot. Clicking the down-arrow key changes to an earlier plot. When the cursor is positioned on or near a contour line and the left mouse button is pressed, the contour value of the nearest contour line is drawn at the mouse position. The font size of contour labels is the same as that for text. The cursor is confined to the plot window in this mode. To leave this mode and return the mouse cursor to its default shape, click the Label Contours button a second time.</para>
    </sect1>

    <sect1 label="">
      <title>5.9 Display Coordinates menu button</title>
      <para>To activate the xy-coordinates display function click the View menu button and then the Display Coordinates button. The mouse cursor changes to a cross hair when this button is clicked the first time. Values of the x and y coordinates of the cursor are displayed in the lower left corner of the the plot window when the mouse is within the plot box. For two-dimensional color and contour plots, interpolated values of the z coordinate at the mouse position are displayed just below the cursor when the mouse is within the area where z coordinates are available. The font size of the coordinates display is the same as that for text. The cursor is confined to the plot window in this mode. To turn the coordinates display off and return the mouse cursor to its default shape, click the Display Coordinates button a second time. This function works for two-dimensional plots only.</para>
    </sect1>

    <sect1 label="">
      <title>5.10 UTF-8 escape sequences</title>
      <para>UTF-8 escape sequences can be used to specify characters which are not available on the keyboard for <literal>xlabel</literal>, <literal>ylabel</literal>, <literal>zlabel</literal>, <literal>title</literal>, <literal>legend_string</literal>, and <literal>text string</literal>. These codes can be found in the Unicode Character Map. The Unicode Character Map can be run with the command gucharmap. The codes can be specified with either hexadecimal or octal escape sequences. These codes are \xhh and \ooo, respectively. UTF-8 hexadecimal escape sequences for Greek letters and some common mathematical symbols are listed below.</para>

      <sect2 label="">
        <title>5.10.1 Greek letters</title>
        <informalfigure>
          <mediaobject><imageobject><imagedata fileref="./figures/greek_letters.png" format="PNG"></imagedata></imageobject><textobject><literallayout>greek_letters_symbols.png
</literallayout></textobject></mediaobject>
        </informalfigure>
      </sect2>

      <sect2 label="">
        <title>5.10.2 Math symbols</title>
        <informalfigure>
          <mediaobject><imageobject><imagedata fileref="./figures/math_symbols.png" format="PNG"></imagedata></imageobject><textobject><literallayout>math_symbols.png
</literallayout></textobject></mediaobject>
        </informalfigure>
        <para>See Examples 4, 5, and 7 for use of UTF-8 escape sequences.</para>
        <para><indexterm role="cp"><primary>operation</primary></indexterm><indexterm role="cp"><primary>run GSEGrafix from terminal</primary></indexterm><indexterm role="cp"><primary>run GSEGrafix from Octave program</primary></indexterm><indexterm role="cp"><primary>run GSEGrafix from C program</primary></indexterm><indexterm role="cp"><primary>zoom capability</primary></indexterm><indexterm role="cp"><primary>save as image file</primary></indexterm><indexterm role="cp"><primary>axis-limits modification</primary></indexterm><indexterm role="cp"><primary>rotate 3d axes</primary></indexterm><indexterm role="cp"><primary>contour labels</primary></indexterm><indexterm role="cp"><primary>coordinates display</primary></indexterm><indexterm role="cp"><primary>UTF-8 escape sequences</primary></indexterm><indexterm role="cp"><primary>escape sequences</primary></indexterm><indexterm role="cp"><primary>Greek-letter escape sequences</primary></indexterm><indexterm role="cp"><primary>math-symbol escape sequences</primary></indexterm></para>
      </sect2>
    </sect1>
  </chapter>

  <chapter label="" xreflabel="6 Color specification" id="Color-specification">
    <title>6 Color specification</title>
    <para>Colors can be described with three characteristics: hue (hue varies from 0 to 360 degrees on a color wheel), value or brightness (brightness varies from 0 to 255), and saturation or hue dominance (saturation varies from 0 to 255). The colors black, gray, silver, and white correspond to minimum color saturation of 0 and color brightness of 0 (black), 128 (gray), 192 (silver), and 255 (white). The colors red, yellow, lime, aqua, blue, and fuchsia correspond to maximum color saturation of 255 and maximum color brightness of 255. These colors represent hues of 0 (red), 60 (yellow), 120 (lime), 180 (aqua), 240 (blue), and 300 (fuchsia). The colors maroon, olive, green, teal, navy, and purple correspond to the same hues and maximum color saturation of 255 but with half-maximum brightness of 128.</para>
    <para>Twelve colors with maximum saturation and maximum brightness which span the spectrum of hues are:</para>
    <informalfigure>
      <mediaobject><imageobject><imagedata fileref="./figures/colors1.png" format="PNG"></imagedata></imageobject><textobject><literallayout>colors1.png
</literallayout></textobject></mediaobject>
    </informalfigure>
    <para>The corresponding colors with maximum saturation but half-maximum brightness are:</para>
    <informalfigure>
      <mediaobject><imageobject><imagedata fileref="./figures/colors2.png" format="PNG"></imagedata></imageobject><textobject><literallayout>colors2.png
</literallayout></textobject></mediaobject>
    </informalfigure>
    <para>Some additional colors with varying hue, brightness, and saturation are:</para>
    <informalfigure>
      <mediaobject><imageobject><imagedata fileref="./figures/colors3.png" format="PNG"></imagedata></imageobject><textobject><literallayout>colors3.png
</literallayout></textobject></mediaobject>
    </informalfigure>
    <para><indexterm role="cp"><primary>color specification</primary></indexterm></para>
  </chapter>

  <chapter label="" xreflabel="7 Examples" id="Examples">
    <title>7 Examples</title>
    <sect1 label="">
      <title>7.1 Example 1</title>
      <para><emphasis role="bold">Two-dimensional linear plot: y = sin(x)/x</emphasis></para>

      <sect2 label="">
        <title>7.1.1 Octave code</title>
        <para>The data file was created using Octave with the following code:</para>
        <screen>
% sinc.m
%
% Calculates data for y = sin(x)/x plot.

x = 6*pi*(-1:0.01:1) + 0.00001;
y = sin(x)./x;

fname = "/home/sab/gsegrafix/data_files/sinc.txt";
fid = fopen(fname, "w");
fprintf(fid, "%10.5f %10.5f\n", [x; y]);
fclose(fid);
</screen>
      </sect2>

      <sect2 label="">
        <title>7.1.2 Parameter file</title>
        <para>The parameter file looks like the following:</para>
        <screen>
file_name               "/home/sab/gsegrafix/data_files/sinc.txt"
file_format             "%lf %lf"
plot_type               "points"
plot_style              lk

file_name               "/home/sab/gsegrafix/data_files/sinc.txt"
file_format             "%lf %lf"
plot_type               "points"
plot_style              cr

axis_type               "linear"

minor_ticks             "on"

grid                    ls

xlabel                  "x axis"
ylabel                  "y axis"
title                   "y = sin(x)/x"

legend_string           "sin(x)/x"
legend_string           "data"
legend_coords_rel       0.05 0.95
legend_anchor           "northwest"

image_filename          "/home/sab/gsegrafix/image_files/tux.png"
image_coords_rel        -0.15 1.04
image_anchor            "center"

date_time               "southeast"

font_size_date_time     12
font_size_legend        12
font_size_text          12
font_size_tick_labels   14
font_size_axis_labels   16
font_size_title         18
</screen>
        <para>A separate data file, <ulink url="./help_files/sinc.txt">sinc.txt</ulink>, and parameter file, <ulink url="./help_files/sinc_param.txt">sinc_param.txt</ulink>, for this example can be copied and used to reproduce this plot. The path in the arguments for the file_name keyword must correspond to the path where the data file, sinc.txt, is saved.</para>
      </sect2>

      <sect2 label="">
        <title>7.1.3 Plot</title>
        <para>The resulting plot is:</para>
        <informalfigure>
          <mediaobject><imageobject><imagedata fileref="./figures/sinc.png" format="PNG"></imagedata></imageobject><textobject><literallayout>sinc.png
</literallayout></textobject></mediaobject>
        </informalfigure>
      </sect2>
    </sect1>

    <sect1 label="">
      <title>7.2 Example 2</title>
      <para><emphasis role="bold">Two-dimensional linear plot: orbit</emphasis></para>

      <sect2 label="">
        <title>7.2.1 Octave code</title>
        <para>The data file was created using Octave with the following code:</para>
        <screen>
% orbit.m
%
% Calculates orbit coordinates for specified orbit parameters.

% Orbit equations
%
% Reference:
%    Roger R. Bate, Donald D. Mueller, Jerry E. White,
%    <citetitle>Fundamentals of Astrodynamics,</citetitle> Dover, 1971 (BMW)
%
% r = p/[1 + e*cos(theta)]           (BMW, p. 20, eq. 1.5-4)
% p = a*(1 - e*e)                    (BMW, p. 24, eq. 1.5-6)
% p = h*h/mu                         (BMW, p. 26, eq. 1.6-1)
% dt = (r*r/h)*dtheta                (BMW, p. 31, eq. 1.7-6)
% period = [2*pi/sqrt(mu)]*a^(3/2)   (BMW, p. 33, eq. 1.7-9)
% where:
%    r      = radius (m) from focus of elliptical orbit
%    theta  = angle (rad) from perigee
%    a      = semi-major axis (m) of elliptical orbit
%    e      = eccentricity of elliptical orbit
%    p      = semi-latus rectum (m)
%    h      = specific angular momentum (m^2/sec)
%    mu     = earth gravitational constant (m^3/sec^2)
%    dt     = time differential (sec)
%    dtheta = angle differential (rad)
%    period = orbit period (sec)

% Define constants
deg2rad = pi/180;           % conversion from degrees to radians (rad/deg)
Rsphere = 6.37100079e+06;   % spherical-earth radius (m)
mu      = 3.986005e+14;     % earth gravitational constant (m^3/sec^2)

% Specify orbit parameters
e = 0.7;                % eccentricity
period = 12;            % period (hr)
period = period*3600;   % period (sec)

% Calculate orbit in polar coordinates
a = (period/(2*pi/sqrt(mu)))^(2/3);   % semi-major axis (m)
p = a*(1 - e*e);                      % semi-latus rectum (m)
h = sqrt(mu*p);                       % specific angular momentum (m^2/sec)
theta = (0:0.005:1)'*2*pi;            % angle from perigee (rad)
r = p./(1 + e*cos(theta));            % radius (m) from focus of elliptical orbit
npts = length(theta);

% Calculate time as a function of angle from perigee
%    dt = (r*r/h)*dtheta
%       = (p*p/h)*d(theta)/[1 + e*cos(theta)]^2
%    t = (p*p/h)*[e*sin(theta)/((e^2 - 1)*(1 + e*cos(theta))) - ...
%                 (1/(e^2 - 1))*(2/(sqrt(1 - e^2)))*atan((1 - e)* ...
%                 tan(theta/2)/sqrt(1 - e^2))]
time = zeros(npts,1);
time = (p^2/h)*(e*sin(theta)./((e^2 - 1)*(1 + e*cos(theta))) - ...
                (1/(e^2 - 1))*(2/(sqrt(1 - e^2)))* ...
                atan((1 - e)*tan(theta/2)/sqrt(1 - e^2)));
time((npts+1)/2:npts) = 2*time((npts+1)/2) - time((npts+1)/2:-1:1);
time(npts) = period;

% Calculate orbit in rectangular coordinates
x_orbit = -r.*cos(theta);   % (m)
y_orbit = -r.*sin(theta);   % (m)

% Calculate ground track in rectangular coordinates
x_ground = -Rsphere*cos(theta);   % (m)
y_ground = -Rsphere*sin(theta);   % (m)

% Save orbit and ground-track data to file
fname = "/home/sab/gsegrafix/data_files/orbit.txt";
fid = fopen(fname, "w");
fprintf(fid, "%15.5e %15.5e %15.5e %15.5e\n", ...
        [x_orbit'/1000;  y_orbit'/1000; ...
         x_ground'/1000; y_ground'/1000]);
fclose(fid);

% Interpolate to find angle from perigee for equal time increments
time_interp = (0:600:period)';   % (sec)
x_orbit_interp  = interp1(time, x_orbit,  time_interp);
y_orbit_interp  = interp1(time, y_orbit,  time_interp);
x_ground_interp = interp1(time, x_ground, time_interp);
y_ground_interp = interp1(time, y_ground, time_interp);

% Save data for lines connecting corresponding points on orbit and ground track
fname = "/home/sab/gsegrafix/data_files/orbit_lines.txt";
fid = fopen(fname, "w");
npts_interp = length(time_interp);
for ( i = 1:npts_interp )
   fprintf(fid, "%15.5e %15.5e\n", x_orbit_interp(i)/1000,  y_orbit_interp(i)/1000);
   fprintf(fid, "%15.5e %15.5e\n", x_ground_interp(i)/1000, y_ground_interp(i)/1000);
   fprintf(fid, "%15s %15s\n", '*', '*');
end
fclose(fid);
</screen>
      </sect2>

      <sect2 label="">
        <title>7.2.2 Parameter file</title>
        <para>The parameter file looks like the following:</para>
        <screen>
file_name               "/home/sab/gsegrafix/data_files/orbit.txt"
file_format             "%lf %lf %*lf %*lf"
plot_type               "points"
plot_style              lr

file_name               "/home/sab/gsegrafix/data_files/orbit.txt"
file_format             "%*lf %*lf %lf %lf"
plot_type               "points"
plot_style              lr

file_name               "/home/sab/gsegrafix/data_files/orbit_lines.txt"
file_format             "%lf %lf"
plot_type               "points"
plot_style              lr

axis_type               "linear"
axis_scale              "equal"

axis_limits             * * -20000 30000

grid                    ls

xlabel                  "x axis (km)"
ylabel                  "y axis (km)"
title                   "Orbit"

symbol_coords           3.46440e+04 1.51700e+04
symbol_style            Ck6

text_string             "Earth"
text_coords_abs         0.0 0.0
text_anchor             "center"

text_string             "satellite"
text_coords_abs         3.51440e+04 1.56700e+04
text_anchor             "southwest"

text_string             "Orbit parameters:"
text_string             "period = 12 hr"
text_string             "eccentricity = 0.7"
text_coords_rel         0.03 0.97
text_anchor             "northwest"

text_string             "Lines between orbit and ground track drawn"
text_string             "at equal time increments of 10 minutes."
text_string             "Much more time spent near apogee than"
text_string             "near perigee."
text_coords_rel         0.97 0.97
text_anchor             "northeast"

font_size_date_time     12
font_size_legend        12
font_size_text          12
font_size_tick_labels   14
font_size_axis_labels   16
font_size_title         18
</screen>
      </sect2>

      <sect2 label="">
        <title>7.2.3 Plot</title>
        <para>The resulting plot is:</para>
        <informalfigure>
          <mediaobject><imageobject><imagedata fileref="./figures/orbit.png" format="PNG"></imagedata></imageobject><textobject><literallayout>orbit.png
</literallayout></textobject></mediaobject>
        </informalfigure>
      </sect2>
    </sect1>

    <sect1 label="">
      <title>7.3 Example 3</title>
      <para><emphasis role="bold">Two-dimensional loglog plot: y = 1.001 + sin(x)</emphasis></para>

      <sect2 label="">
        <title>7.3.1 Octave code</title>
        <para>The data file was created using Octave with the following code:</para>
        <screen>
% loglog.m
%
% Calculates data for y = 1.001 + sin(x).

x = 2*pi*(0.01:0.01:10);
y = 1.001 + sin(x);

fname = "/home/sab/gsegrafix/data_files/loglog.txt";
fid = fopen(fname, "w");
fprintf(fid, "%10.5f  %10.5f\n", [x; y]);
fclose(fid);
</screen>
      </sect2>

      <sect2 label="">
        <title>7.3.2 Parameter file</title>
        <para>The parameter file looks like the following:</para>
        <screen>
file_name               "/home/sab/gsegrafix/data_files/loglog.txt"
file_format             "%lf %lf"
plot_type               "points"
plot_style              lk

axis_type               "loglog"

minor_ticks             "on"

grid                    ls

xlabel                  "x axis"
ylabel                  "y axis"
title                   "y = 1.001 + sin(x)"

font_size_date_time     12
font_size_legend        12
font_size_text          12
font_size_tick_labels   14
font_size_axis_labels   16
font_size_title         18
</screen>
      </sect2>

      <sect2 label="">
        <title>7.3.3 Plot</title>
        <para>The resulting plot is:</para>
        <informalfigure>
          <mediaobject><imageobject><imagedata fileref="./figures/loglog.png" format="PNG"></imagedata></imageobject><textobject><literallayout>loglog.png
</literallayout></textobject></mediaobject>
        </informalfigure>
      </sect2>
    </sect1>

    <sect1 label="">
      <title>7.4 Example 4</title>
      <para><emphasis role="bold">Histogram: gaussian (normal) distribution</emphasis></para>

      <sect2 label="">
        <title>7.4.1 Octave code</title>
        <para>The data file was created using Octave with the following code:</para>
        <screen>
% gauss.m
%
% Calculates data for gaussian distribution
% with mean = 0 and standard deviation = 1.

% Calculate data for gaussian distribution
mean = 0.0;
sigma = 1.0;
npts = 1000;
randn("seed", 213);
x = mean + sigma*randn(npts,1);
fname = "/home/sab/gsegrafix/data_files/gauss_data.txt";
fid = fopen(fname, "w");
fprintf(fid, "%10.5f\n", x);
fclose(fid);

% Calculate histogram bin width
[xsort, indices] = sort(x);
q = zeros(3,1);
for ( i = 1:3 )
   index = round(i*0.25*npts);
   q(i) = xsort(index);
end
% See section on bin_width keyword for formulas and references below.
% binwidth = 3.49*sigma/npts^(1.0/3.0);   % Scott
binwidth = 2.0*(q(3) - q(1))/npts^(1.0/3.0);   % Freedman, Diaconis

% Calculate theoretical gaussian distribution
x1 = (mean - 3.5*sigma);
x2 = (mean + 3.5*sigma);
x = x1 + (0:0.005:1)*(x2 - x1);
f1 = 1.0/(sigma*sqrt(2*pi));
y = f1*exp(-(x-mean).^2/(2*sigma^2));
y = 100.0*binwidth*y;   % percent occurrences
fname = "/home/sab/gsegrafix/data_files/gauss_theory.txt";
fid = fopen(fname, "w");
fprintf(fid, "%10.5f %10.5f\n", [x; y]);
fclose(fid);
</screen>
      </sect2>

      <sect2 label="">
        <title>7.4.2 Parameter file</title>
        <para>The parameter file looks like the following:</para>
        <screen>
file_name               "/home/sab/gsegrafix/data_files/gauss_data.txt"
file_format             "%lf"
plot_type               "histogram"
plot_style              Bk

file_name               "/home/sab/gsegrafix/data_files/gauss_theory.txt"
file_format             "%lf %lf"
plot_type               "points"
plot_style              lr

axis_type               "linear"

grid                    ls

xlabel                  "x axis"
ylabel                  "percent occurrences"
title                   "Gaussian Distribution"

line_coords             -1.645 -1.645 0 2.790
line_style              dr
line_coords             1.645  1.645 0 2.790
line_style              dr

legend_string           "data"
legend_string           "100*binwidth*p(x)"
legend_coords_rel       0.95 0.95
legend_anchor           "northeast"

text_string             "probability distribution"
text_string             "p(x) = [1/{sqrt(2\xCF\x80)*a}]*exp(-t\xC2\xB2)"
text_string             "t = (x - b)/{sqrt(2)*a}"
text_string             "a = standard deviation"
text_string             "b = mean"
text_string             ""
text_string             "mean = 0"
text_string             "standard deviation = 1"
text_string             "1000 samples"
text_string             ""
text_string             "90% of samples contained"
text_string             "between dashed lines at"
text_string             "x = \xC2\xB1 1.645"
text_coords_rel         0.05 0.95
text_anchor             "northwest"

font_size_date_time     12
font_size_legend        12
font_size_text          12
font_size_tick_labels   14
font_size_axis_labels   16
font_size_title         18
</screen>
      </sect2>

      <sect2 label="">
        <title>7.4.3 Plot</title>
        <para>The resulting plot is:</para>
        <informalfigure>
          <mediaobject><imageobject><imagedata fileref="./figures/gauss.png" format="PNG"></imagedata></imageobject><textobject><literallayout>gauss.png
</literallayout></textobject></mediaobject>
        </informalfigure>
      </sect2>
    </sect1>

    <sect1 label="">
      <title>7.5 Example 5</title>
      <para><emphasis role="bold">Polar plot: gain of half-wavelength dipole antenna</emphasis></para>

      <sect2 label="">
        <title>7.5.1 Octave code</title>
        <para>The data file was created using Octave with the following code:</para>
        <screen>
% dipole.m
%
% Calculates normalized gain pattern of half-wavelength dipole antenna.
%
% Reference:
%    Constantine Balanis, <citetitle>Antenna Theory,</citetitle>
%    John Wiley &amp; Sons, 1982, pp. 120 - 121

% Define constants
deg2rad = pi/180;   % (rad/deg)
DBL_MIN = 2.22507e-308;

% Calculate dipole antenna gain pattern
lambda = 1;
l = lambda/2;
k = 2*pi/lambda;
f1 = k*l/2;
theta = (0:1:360)'*deg2rad;
npts = length(theta);
gain = zeros(npts,1);
gain(1)   = DBL_MIN;
gain(181) = DBL_MIN;
gain(361) = DBL_MIN;
indices = [(2:180) (182:360)]';
gain(indices) = ((cos(f1*cos(theta(indices))) - cos(f1))./sin(theta(indices))).^2;
gain_dB = 10*log10(gain);

% Calculate 3-dB beam width
theta_3dB = interp1(gain_dB(1:181), theta(1:181), -3)/deg2rad;
beamwidth_3dB = 2*(90 - theta_3dB);

% Save data
fname = "/home/sab/gsegrafix/data_files/dipole.txt";
fid = fopen(fname, "w");
fprintf(fid, "%13.5e %13.5e %13.5e\n", [theta'; gain'; gain_dB']);
fclose(fid);
</screen>
      </sect2>

      <sect2 label="">
        <title>7.5.2 Parameter file</title>
        <para>The parameter file looks like the following:</para>
        <screen>
file_name               "/home/sab/gsegrafix/data_files/dipole.txt"
file_format             "%lf %*lf %lf"
plot_type               "points"
plot_style              lk

axis_type               "polar"

axis_limits             * * -40 0

minor_ticks             "on"

grid                    ls

xlabel                  "\xCE\xB8 (deg)"
ylabel                  "gain (dB)"
title                   "Normalized Gain of Half-Wavelength Dipole Antenna"

text_string             "Angles measured from antenna axis."
text_string             "3-dB beam width = 78 deg"
text_coords_rel         1.0 0.1
text_anchor             "northwest"

font_size_date_time     12
font_size_legend        12
font_size_text          12
font_size_tick_labels   14
font_size_axis_labels   16
font_size_title         18
</screen>
      </sect2>

      <sect2 label="">
        <title>7.5.3 Plot</title>
        <para>The resulting plot is:</para>
        <informalfigure>
          <mediaobject><imageobject><imagedata fileref="./figures/dipole.png" format="PNG"></imagedata></imageobject><textobject><literallayout>dipole.png
</literallayout></textobject></mediaobject>
        </informalfigure>
      </sect2>
    </sect1>

    <sect1 label="">
      <title>7.6 Example 6</title>
      <para><emphasis role="bold">Three-dimensional points plot: logarithmic helix</emphasis></para>

      <sect2 label="">
        <title>7.6.1 Octave code</title>
        <para>The data file was created using Octave with the following code:</para>
        <screen>
% loghelix.m
%
% Calculates data for 3d logarithmic helix plot.

theta = 20*pi*(0:0.001:1);
r = exp(0.05*theta);
x = r.*cos(theta);
y = r.*sin(theta);
z = theta;

fname = "/home/sab/gsegrafix/data_files/loghelix.txt";
fid = fopen(fname, "w");
fprintf(fid, "%10.5f %10.5f %10.5f\n", [x; y; z]);
fclose(fid);
</screen>
      </sect2>

      <sect2 label="">
        <title>7.6.2 Parameter file</title>
        <para>The parameter file looks like the following:</para>
        <screen>
file_name               "/home/sab/gsegrafix/data_files/loghelix.txt"
file_format             "%lf %lf %lf"
plot_type               "points"
plot_style              lr

axis_type               "3d"

axis_limits             -25 25 -25 25 * *

view3d                  30 30

grid                    ls

xlabel                  "x axis"
ylabel                  "y axis"
zlabel                  "z axis"
title                   "Logarithmic Helix"

text_string             "theta = 20*pi*(0:0.001:1)"
text_string             "r = exp(0.05*theta)"
text_string             "x = r*cos(theta)"
text_string             "y = r*sin(theta)"
text_string             "z = theta"
text_coords_rel         1.10 0.50
text_anchor             "west"

font_size_date_time     12
font_size_legend        12
font_size_text          12
font_size_tick_labels   14
font_size_axis_labels   16
font_size_title         18
</screen>
      </sect2>

      <sect2 label="">
        <title>7.6.3 Plot</title>
        <para>The resulting plot is:</para>
        <informalfigure>
          <mediaobject><imageobject><imagedata fileref="./figures/loghelix.png" format="PNG"></imagedata></imageobject><textobject><literallayout>loghelix.png
</literallayout></textobject></mediaobject>
        </informalfigure>
      </sect2>
    </sect1>

    <sect1 label="">
      <title>7.7 Example 7</title>
      <para><emphasis role="bold">Three-dimensional mesh plot: z = sin(r)/r</emphasis></para>

      <sect2 label="">
        <title>7.7.1 Octave code</title>
        <para>The data file was created using Octave with the following code:</para>
        <screen>
% sinc3d.m
%
% Calculates data for sin(r)/r plot, where r = sqrt(x^2 + y^2).

x = (-10:0.5:10) + 0.00001;
y = (-10:0.5:10) + 0.00001;
nx = length(x);
ny = length(y);
z = zeros(nx, ny);
for ( i = 1:nx )
   for ( j = 1:ny )
      r = sqrt(x(i)^2 + y(j)^2);
      z(i,j) = sin(r)/r;
   end
end

fname = "/home/sab/gsegrafix/data_files/sinc3d.txt";
fid = fopen(fname, "w");
fprintf(fid, "%10d%10d", nx, ny);
fprintf(fid, "\n");
fprintf(fid, "%10.2f", x);
fprintf(fid, "\n");
fprintf(fid, "%10.2f", y);
fprintf(fid, "\n");
for ( i = 1:nx )
   for ( j = 1:ny )
      fprintf(fid, "%10.5f", z(i,j));
   end
   fprintf(fid, "\n");
end
fclose(fid);
</screen>
      </sect2>

      <sect2 label="">
        <title>7.7.2 Parameter file</title>
        <para>The parameter file looks like the following:</para>
        <screen>
file_name               "/home/sab/gsegrafix/data_files/sinc3d.txt"
plot_type               "mesh"
plot_style              "auto" 0xC0

axis_type               "3d"

view3d                  30 30

minor_ticks             "on"

grid                    ls

xlabel                  "x axis"
ylabel                  "y axis"
zlabel                  "z axis"
title                   "z = sin(r)/r"

text_string             "r = sqrt(x\xC2\xB2 + y\xC2\xB2)"
text_coords_rel         1.10 0.50
text_anchor             "west"

font_size_date_time     12
font_size_legend        12
font_size_text          12
font_size_tick_labels   14
font_size_axis_labels   16
font_size_title         18
</screen>
        <para>A separate data file, <ulink url="./help_files/sinc3d.txt">sinc3d.txt</ulink>, and parameter file, <ulink url="./help_files/sinc3d_param.txt">sinc3d_param.txt</ulink>, for this example can be copied and used to reproduce this plot. The path in the arguments for the file_name keyword must correspond to the path where the data file, sinc3d.txt, is saved.</para>
      </sect2>

      <sect2 label="">
        <title>7.7.3 Plot</title>
        <para>The resulting plot is:</para>
        <informalfigure>
          <mediaobject><imageobject><imagedata fileref="./figures/sinc3d.png" format="PNG"></imagedata></imageobject><textobject><literallayout>sinc3d.png
</literallayout></textobject></mediaobject>
        </informalfigure>
      </sect2>
    </sect1>

    <sect1 label="">
      <title>7.8 Example 8</title>
      <para><emphasis role="bold">Three-dimensional contour plot: magnitude of complex function log(z)</emphasis></para>

      <sect2 label="">
        <title>7.8.1 Octave code</title>
        <para>The data file was created using Octave with the following code:</para>
        <screen>
% logz.m
%
% Calculates data for magnitude of log(z) plot, where z = x + i*y.

x = [(-3.0:0.1:-0.1) -0.05 -0.02 0.02 0.05 (0.1:0.1:3.0)];
y = [(-3.0:0.1:-0.1) -0.05 -0.02 0.02 0.05 (0.1:0.1:3.0)];
nx = length(x);
ny = length(y);
mag = zeros(nx,ny);
for ( ii = 1:nx )
   for ( jj = 1:ny )
      z = x(ii) + i*y(jj);
      mag(ii,jj) = abs(log(z));
   end
end

fname = "/home/sab/gsegrafix/data_files/logz.txt";
fid = fopen(fname, "w");
fprintf(fid, "%10d%10d", nx, ny);
fprintf(fid, "\n");
fprintf(fid, "%10.3f", x);
fprintf(fid, "\n");
fprintf(fid, "%10.3f", y);
fprintf(fid, "\n");
for ( ii = 1:nx )
   for ( jj = 1:ny )
      fprintf(fid, "%15.5e", mag(ii,jj));
   end
   fprintf(fid, "\n");
end
fclose(fid);
</screen>
      </sect2>

      <sect2 label="">
        <title>7.8.2 Parameter file</title>
        <para>The parameter file looks like the following:</para>
        <screen>
file_name               "/home/sab/gsegrafix/data_files/logz.txt"
plot_type               "contour"
plot_style              0xD0723EFF 0x9C562EFF   # copper, dark copper

axis_type               "3d"

axis_limits             * * * * * 4

view3d                  300 30

contours                21

grid                    ls

xlabel                  "x axis"
ylabel                  "y axis"
zlabel                  "|log(z)|"
title                   "Magnitude of Complex Function log(z)"

text_string             "z = r*exp(i*theta)"
text_string             "log(z) = log(r) + i*theta"
text_coords_rel         1.10 0.50
text_anchor             "west"

font_size_date_time     12
font_size_legend        12
font_size_text          12
font_size_tick_labels   14
font_size_axis_labels   16
font_size_title         18
</screen>
      </sect2>

      <sect2 label="">
        <title>7.8.3 Plot</title>
        <para>The resulting plot is:</para>
        <informalfigure>
          <mediaobject><imageobject><imagedata fileref="./figures/logzcontour3d.png" format="PNG"></imagedata></imageobject><textobject><literallayout>logzcontour3d.png
</literallayout></textobject></mediaobject>
        </informalfigure>
      </sect2>
    </sect1>

    <sect1 label="">
      <title>7.9 Example 9</title>
      <para><emphasis role="bold">Two-dimensional contour plot: magnitude of complex function log(z)</emphasis></para>

      <sect2 label="">
        <title>7.9.1 Octave code</title>
        <para>The data file was created using Octave with the following code (same as for Example 8 above):</para>
        <screen>
% logz.m
%
% Calculates data for magnitude of log(z) plot, where z = x + i*y.

x = [(-3.0:0.1:-0.1) -0.05 -0.02 0.02 0.05 (0.1:0.1:3.0)];
y = [(-3.0:0.1:-0.1) -0.05 -0.02 0.02 0.05 (0.1:0.1:3.0)];
nx = length(x);
ny = length(y);
mag = zeros(nx,ny);
for ( ii = 1:nx )
   for ( jj = 1:ny )
      z = x(ii) + i*y(jj);
      mag(ii,jj) = abs(log(z));
   end
end

fname = "/home/sab/gsegrafix/data_files/logz.txt";
fid = fopen(fname, "w");
fprintf(fid, "%10d%10d", nx, ny);
fprintf(fid, "\n");
fprintf(fid, "%10.3f", x);
fprintf(fid, "\n");
fprintf(fid, "%10.3f", y);
fprintf(fid, "\n");
for ( ii = 1:nx )
   for ( jj = 1:ny )
      fprintf(fid, "%15.5e", mag(ii,jj));
   end
   fprintf(fid, "\n");
end
fclose(fid);
</screen>
      </sect2>

      <sect2 label="">
        <title>7.9.2 Parameter file</title>
        <para>The parameter file looks like the following:</para>
        <screen>
file_name               "/home/sab/gsegrafix/data_files/logz.txt"
plot_type               "contour"
plot_style              k

axis_type               "linear"

axis_limits             -3 3 -2.25 2.25 0 4

contours                9

minor_ticks             "on"

grid                    ls

xlabel                  "x axis"
ylabel                  "y axis"
title                   "Magnitude of Complex Function log(z)"

font_size_date_time     12
font_size_legend        12
font_size_text          12
font_size_tick_labels   14
font_size_axis_labels   16
font_size_title         18
</screen>
      </sect2>

      <sect2 label="">
        <title>7.9.3 Plot</title>
        <para>The resulting plot is:</para>
        <informalfigure>
          <mediaobject><imageobject><imagedata fileref="./figures/logzcontour2d.png" format="PNG"></imagedata></imageobject><textobject><literallayout>logzcontour2d.png
</literallayout></textobject></mediaobject>
        </informalfigure>
      </sect2>
    </sect1>

    <sect1 label="">
      <title>7.10 Example 10</title>
      <para><emphasis role="bold">Two-dimensional color plot: magnitude of complex function log(z)</emphasis></para>

      <sect2 label="">
        <title>7.10.1 Octave code</title>
        <para>The data file was created using Octave with the following code (same as for Example 8 above):</para>
        <screen>
% logz.m
%
% Calculates data for magnitude of log(z) plot, where z = x + i*y.

x = [(-3.0:0.1:-0.1) -0.05 -0.02 0.02 0.05 (0.1:0.1:3.0)];
y = [(-3.0:0.1:-0.1) -0.05 -0.02 0.02 0.05 (0.1:0.1:3.0)];
nx = length(x);
ny = length(y);
mag = zeros(nx,ny);
for ( ii = 1:nx )
   for ( jj = 1:ny )
      z = x(ii) + i*y(jj);
      mag(ii,jj) = abs(log(z));
   end
end

fname = "/home/sab/gsegrafix/data_files/logz.txt";
fid = fopen(fname, "w");
fprintf(fid, "%10d%10d", nx, ny);
fprintf(fid, "\n");
fprintf(fid, "%10.3f", x);
fprintf(fid, "\n");
fprintf(fid, "%10.3f", y);
fprintf(fid, "\n");
for ( ii = 1:nx )
   for ( jj = 1:ny )
      fprintf(fid, "%15.5e", mag(ii,jj));
   end
   fprintf(fid, "\n");
end
fclose(fid);
</screen>
      </sect2>

      <sect2 label="">
        <title>7.10.2 Parameter file</title>
        <para>The parameter file looks like the following:</para>
        <screen>
file_name               "/home/sab/gsegrafix/data_files/logz.txt"
plot_type               "color"
plot_style              "bilinear"

axis_type               "linear"

axis_limits             * * * * * 4

grid                    ls

xlabel                  "x axis"
ylabel                  "y axis"
zlabel                  "|log(z)|"
title                   "Magnitude of Complex Function log(z)"

font_size_date_time     12
font_size_legend        12
font_size_text          12
font_size_tick_labels   14
font_size_axis_labels   16
font_size_title         18
</screen>
        <para>If there are z-coordinate values that are less than the value of zmin or greater than the value of zmax specified with an axis_limits keyword, these areas of the plot will have colors corresponding to zmin or zmax (blue or red), respectively.</para>
      </sect2>

      <sect2 label="">
        <title>7.10.3 Plot</title>
        <para>The resulting plot is:</para>
        <informalfigure>
          <mediaobject><imageobject><imagedata fileref="./figures/logzcolor2d.png" format="PNG"></imagedata></imageobject><textobject><literallayout>logzcolor2d.png
</literallayout></textobject></mediaobject>
        </informalfigure>
      </sect2>
    </sect1>

    <sect1 label="">
      <title>7.11 Example 11</title>
      <para><emphasis role="bold">Two-dimensional color plot: Mandelbrot set</emphasis></para>

      <sect2 label="">
        <title>7.11.1 C code</title>
        <para>The data file was created using the following C program (Octave was too slow):</para>
        <screen>
/*******************************************************************************
*
* Calculate Mandelbrot set.
*
* The Mandelbrot set consists of a set of points, c = x + iy, in the complex
* plane. These points must meet the condition that the magnitude of the complex
* number z does not grow without bound when the following operation is performed
* a large number of times:
*    z(n+1) = z(n)*z(n) + c, where z(0) = 0 + i0.
* When the data are plotted, colors are assigned to values of c according to the
* number of times the above operation had to be performed to cause the magnitude
* of z to exceed a specified value, in this case 2. The color black is assigned
* to points in the Mandelbrot set.
*
* Compile: gcc -Wall mandelbrot.c -o mandelbrot -lm
*
*******************************************************************************/

#include &lt;complex.h&gt;
#include &lt;math.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;

int main ( int argc, char *argv[] )
   {
   /* Declare variables */
   unsigned int i, j, nx, ny, count[500][500], count_max;
   double xmin, xmax, ymin, ymax, x[500], y[500], rmax;
   _Complex double c, z;
   char fname[] = "/home/sab/gsegrafix/data_files/mandelbrot.txt";
   FILE *fid;

   /* Define limits of calculation */
   xmin = -2.0;
   xmax =  0.5;
   ymin = -1.25;
   ymax =  1.25;

   /* Calculate x and y values for plotting area 433 pixels by 433 pixels */
   nx = 433;
   for ( i=1; i&lt;=nx; i++ )
      x[i-1] = xmin + ( (double) (i - 1)/ (double) (nx - 1))*(xmax - xmin);

   ny = 433;
   for ( j=1; j&lt;=ny; j++ )
      y[j-1] = ymin + ( (double) (j - 1)/ (double) (ny - 1))*(ymax - ymin);

   /* Set values of count to 0 for each value of x and y */
   for ( i=1; i&lt;=nx; i++ )
      for ( j=1; j&lt;=ny; j++ )
         count[i-1][j-1] = 0;

   /* Calculate Mandelbrot-set data */
   rmax = 2.0;
   count_max = 10000;
   for ( i=1; i&lt;=nx; i++ )
      for ( j=1; j&lt;=ny; j++ )
         {
         c = x[i-1] + I*y[j-1];
         z = 0.0;
         while ( (cabs(z) &lt;= rmax) &amp;&amp; (count[i-1][j-1] &lt;= count_max) )
            {
            z = z*z + c;
            count[i-1][j-1]++;
            }
         if ( count[i-1][j-1] &gt; 0 )
            count[i-1][j-1]--;
         }

   /* Save data to file */
   fid = fopen(fname, "w");
   fprintf(fid, "%u %u", nx, ny);
   fprintf(fid, "\n");
   for ( i=1; i&lt;=nx; i++ )
      fprintf(fid, "%+10.7f ", x[i-1]);
   fprintf(fid, "\n");
   for ( j=1; j&lt;=ny; j++ )
      fprintf(fid, "%+10.7f ", y[j-1]);
   fprintf(fid, "\n");
   for ( i=1; i&lt;=nx; i++ )
      {
      for ( j=1; j&lt;=ny; j++ )
         {
         if ( count[i-1][j-1] == count_max )
            fprintf(fid, "%5d ", -1);
         else
            fprintf(fid, "%5u ", count[i-1][j-1]);
         }
      fprintf(fid, "\n");
      }
   fclose(fid);

   return 0;
   }
</screen>
      </sect2>

      <sect2 label="">
        <title>7.11.2 Parameter file</title>
        <para>The parameter file looks like the following:</para>
        <screen>
file_name               "/home/sab/gsegrafix/data_files/mandelbrot.txt"
plot_type               "color"
plot_style              "bilinear" 0 10000

axis_type               "linear"

axis_limits             -2.0 0.5 -1.25 1.25 0 100   # Changing zmax causes different
                                                    # color assignments for points
                                                    # outside the Mandelbrot set.

xlabel                  "x axis"
ylabel                  "y axis"
zlabel                  "count"
title                   "Mandelbrot Set"   # Points in the Mandelbrot set are black.

font_size_date_time     12
font_size_legend        12
font_size_text          12
font_size_tick_labels   14
font_size_axis_labels   16
font_size_title         18
</screen>
      </sect2>

      <sect2 label="">
        <title>7.11.3 Plot</title>
        <para>The resulting plot is:</para>
        <informalfigure>
          <mediaobject><imageobject><imagedata fileref="./figures/mandelbrot.png" format="PNG"></imagedata></imageobject><textobject><literallayout>mandelbrot.png
</literallayout></textobject></mediaobject>
        </informalfigure>
        <para><indexterm role="cp"><primary>examples</primary></indexterm>
<!-- @node Index -->
<!-- @unnumbered Index -->
<!-- @printindex cp --></para>
      </sect2>
    </sect1>
  </chapter>
</book><!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-indent-step:1
sgml-indent-data:nil
End:
-->
