@node Examples
@unnumbered 7 Examples
@section 7.1 Example 1
@strong{Two-dimensional linear plot: y = sin(x)/x}

@subsection 7.1.1 Octave code
The data file was created using Octave with the following code:

@example
% sinc.m
%
% Calculates data for y = sin(x)/x plot.

x = 6*pi*(-1:0.01:1) + 0.00001;
y = sin(x)./x;

fname = "/home/sab/gsegrafix/data_files/sinc.txt";
fid = fopen(fname, "w");
fprintf(fid, "%10.5f %10.5f\n", [x; y]);
fclose(fid);
@end example

@subsection 7.1.2 Parameter file
The parameter file looks like the following:

@example
file_name               "/home/sab/gsegrafix/data_files/sinc.txt"
file_format             "%lf %lf"
plot_type               "points"
plot_style              lk

file_name               "/home/sab/gsegrafix/data_files/sinc.txt"
file_format             "%lf %lf"
plot_type               "points"
plot_style              cr

axis_type               "linear"

minor_ticks             "on"

grid                    ls

xlabel                  "x axis"
ylabel                  "y axis"
title                   "y = sin(x)/x"

legend_string           "sin(x)/x"
legend_string           "data"
legend_coords_rel       0.05 0.95
legend_anchor           "northwest"

image_filename          "/home/sab/gsegrafix/image_files/tux.png"
image_coords_rel        -0.15 1.04
image_anchor            "center"

date_time               "southeast"

font_size_date_time     12
font_size_legend        12
font_size_text          12
font_size_tick_labels   14
font_size_axis_labels   16
font_size_title         18
@end example

A separate data file, @uref{./help_files/sinc.txt, sinc.txt}, and parameter file, @uref{./help_files/sinc_param.txt, sinc_param.txt}, for this example can be copied and used to reproduce this plot. The path in the arguments for the file_name keyword must correspond to the path where the data file, sinc.txt, is saved.

@subsection 7.1.3 Plot
The resulting plot is:

@image{./figures/sinc, , , sinc.png, .png}

@section 7.2 Example 2
@strong{Two-dimensional linear plot: orbit}

@subsection 7.2.1 Octave code
The data file was created using Octave with the following code:

@example
% orbit.m
%
% Calculates orbit coordinates for specified orbit parameters.

% Orbit equations
%
% Reference:
%    Roger R. Bate, Donald D. Mueller, Jerry E. White,
%    @cite{Fundamentals of Astrodynamics,} Dover, 1971 (BMW)
%
% r = p/[1 + e*cos(theta)]           (BMW, p. 20, eq. 1.5-4)
% p = a*(1 - e*e)                    (BMW, p. 24, eq. 1.5-6)
% p = h*h/mu                         (BMW, p. 26, eq. 1.6-1)
% dt = (r*r/h)*dtheta                (BMW, p. 31, eq. 1.7-6)
% period = [2*pi/sqrt(mu)]*a^(3/2)   (BMW, p. 33, eq. 1.7-9)
% where:
%    r      = radius (m) from focus of elliptical orbit
%    theta  = angle (rad) from perigee
%    a      = semi-major axis (m) of elliptical orbit
%    e      = eccentricity of elliptical orbit
%    p      = semi-latus rectum (m)
%    h      = specific angular momentum (m^2/sec)
%    mu     = earth gravitational constant (m^3/sec^2)
%    dt     = time differential (sec)
%    dtheta = angle differential (rad)
%    period = orbit period (sec)

% Define constants
deg2rad = pi/180;           % conversion from degrees to radians (rad/deg)
Rsphere = 6.37100079e+06;   % spherical-earth radius (m)
mu      = 3.986005e+14;     % earth gravitational constant (m^3/sec^2)

% Specify orbit parameters
e = 0.7;                % eccentricity
period = 12;            % period (hr)
period = period*3600;   % period (sec)

% Calculate orbit in polar coordinates
a = (period/(2*pi/sqrt(mu)))^(2/3);   % semi-major axis (m)
p = a*(1 - e*e);                      % semi-latus rectum (m)
h = sqrt(mu*p);                       % specific angular momentum (m^2/sec)
theta = (0:0.005:1)'*2*pi;            % angle from perigee (rad)
r = p./(1 + e*cos(theta));            % radius (m) from focus of elliptical orbit
npts = length(theta);

% Calculate time as a function of angle from perigee
%    dt = (r*r/h)*dtheta
%       = (p*p/h)*d(theta)/[1 + e*cos(theta)]^2
%    t = (p*p/h)*[e*sin(theta)/((e^2 - 1)*(1 + e*cos(theta))) - ...
%                 (1/(e^2 - 1))*(2/(sqrt(1 - e^2)))*atan((1 - e)* ...
%                 tan(theta/2)/sqrt(1 - e^2))]
time = zeros(npts,1);
time = (p^2/h)*(e*sin(theta)./((e^2 - 1)*(1 + e*cos(theta))) - ...
                (1/(e^2 - 1))*(2/(sqrt(1 - e^2)))* ...
                atan((1 - e)*tan(theta/2)/sqrt(1 - e^2)));
time((npts+1)/2:npts) = 2*time((npts+1)/2) - time((npts+1)/2:-1:1);
time(npts) = period;

% Calculate orbit in rectangular coordinates
x_orbit = -r.*cos(theta);   % (m)
y_orbit = -r.*sin(theta);   % (m)

% Calculate ground track in rectangular coordinates
x_ground = -Rsphere*cos(theta);   % (m)
y_ground = -Rsphere*sin(theta);   % (m)

% Save orbit and ground-track data to file
fname = "/home/sab/gsegrafix/data_files/orbit.txt";
fid = fopen(fname, "w");
fprintf(fid, "%15.5e %15.5e %15.5e %15.5e\n", ...
        [x_orbit'/1000;  y_orbit'/1000; ...
         x_ground'/1000; y_ground'/1000]);
fclose(fid);

% Interpolate to find angle from perigee for equal time increments
time_interp = (0:600:period)';   % (sec)
x_orbit_interp  = interp1(time, x_orbit,  time_interp);
y_orbit_interp  = interp1(time, y_orbit,  time_interp);
x_ground_interp = interp1(time, x_ground, time_interp);
y_ground_interp = interp1(time, y_ground, time_interp);

% Save data for lines connecting corresponding points on orbit and ground track
fname = "/home/sab/gsegrafix/data_files/orbit_lines.txt";
fid = fopen(fname, "w");
npts_interp = length(time_interp);
for ( i = 1:npts_interp )
   fprintf(fid, "%15.5e %15.5e\n", x_orbit_interp(i)/1000,  y_orbit_interp(i)/1000);
   fprintf(fid, "%15.5e %15.5e\n", x_ground_interp(i)/1000, y_ground_interp(i)/1000);
   fprintf(fid, "%15s %15s\n", '*', '*');
end
fclose(fid);
@end example

@subsection 7.2.2 Parameter file
The parameter file looks like the following:

@example
file_name               "/home/sab/gsegrafix/data_files/orbit.txt"
file_format             "%lf %lf %*lf %*lf"
plot_type               "points"
plot_style              lr

file_name               "/home/sab/gsegrafix/data_files/orbit.txt"
file_format             "%*lf %*lf %lf %lf"
plot_type               "points"
plot_style              lr

file_name               "/home/sab/gsegrafix/data_files/orbit_lines.txt"
file_format             "%lf %lf"
plot_type               "points"
plot_style              lr

axis_type               "linear"
axis_scale              "equal"

axis_limits             * * -20000 30000

grid                    ls

xlabel                  "x axis (km)"
ylabel                  "y axis (km)"
title                   "Orbit"

symbol_coords           3.46440e+04 1.51700e+04
symbol_style            Ck6

text_string             "Earth"
text_coords_abs         0.0 0.0
text_anchor             "center"

text_string             "satellite"
text_coords_abs         3.51440e+04 1.56700e+04
text_anchor             "southwest"

text_string             "Orbit parameters:"
text_string             "period = 12 hr"
text_string             "eccentricity = 0.7"
text_coords_rel         0.03 0.97
text_anchor             "northwest"

text_string             "Lines between orbit and ground track drawn"
text_string             "at equal time increments of 10 minutes."
text_string             "Much more time spent near apogee than"
text_string             "near perigee."
text_coords_rel         0.97 0.97
text_anchor             "northeast"

font_size_date_time     12
font_size_legend        12
font_size_text          12
font_size_tick_labels   14
font_size_axis_labels   16
font_size_title         18
@end example

@subsection 7.2.3 Plot
The resulting plot is:

@image{./figures/orbit, , , orbit.png, .png}

@section 7.3 Example 3
@strong{Two-dimensional loglog plot: y = 1.001 + sin(x)}

@subsection 7.3.1 Octave code
The data file was created using Octave with the following code:

@example
% loglog.m
%
% Calculates data for y = 1.001 + sin(x).

x = 2*pi*(0.01:0.01:10);
y = 1.001 + sin(x);

fname = "/home/sab/gsegrafix/data_files/loglog.txt";
fid = fopen(fname, "w");
fprintf(fid, "%10.5f  %10.5f\n", [x; y]);
fclose(fid);
@end example

@subsection 7.3.2 Parameter file
The parameter file looks like the following:

@example
file_name               "/home/sab/gsegrafix/data_files/loglog.txt"
file_format             "%lf %lf"
plot_type               "points"
plot_style              lk

axis_type               "loglog"

minor_ticks             "on"

grid                    ls

xlabel                  "x axis"
ylabel                  "y axis"
title                   "y = 1.001 + sin(x)"

font_size_date_time     12
font_size_legend        12
font_size_text          12
font_size_tick_labels   14
font_size_axis_labels   16
font_size_title         18
@end example

@subsection 7.3.3 Plot
The resulting plot is:

@image{./figures/loglog, , , loglog.png, .png}

@section 7.4 Example 4
@strong{Histogram: gaussian (normal) distribution}

@subsection 7.4.1 Octave code
The data file was created using Octave with the following code:

@example
% gauss.m
%
% Calculates data for gaussian distribution
% with mean = 0 and standard deviation = 1.

% Calculate data for gaussian distribution
mean = 0.0;
sigma = 1.0;
npts = 1000;
randn("seed", 213);
x = mean + sigma*randn(npts,1);
fname = "/home/sab/gsegrafix/data_files/gauss_data.txt";
fid = fopen(fname, "w");
fprintf(fid, "%10.5f\n", x);
fclose(fid);

% Calculate histogram bin width
[xsort, indices] = sort(x);
q = zeros(3,1);
for ( i = 1:3 )
   index = round(i*0.25*npts);
   q(i) = xsort(index);
end
% See section on bin_width keyword for formulas and references below.
% binwidth = 3.49*sigma/npts^(1.0/3.0);   % Scott
binwidth = 2.0*(q(3) - q(1))/npts^(1.0/3.0);   % Freedman, Diaconis

% Calculate theoretical gaussian distribution
x1 = (mean - 3.5*sigma);
x2 = (mean + 3.5*sigma);
x = x1 + (0:0.005:1)*(x2 - x1);
f1 = 1.0/(sigma*sqrt(2*pi));
y = f1*exp(-(x-mean).^2/(2*sigma^2));
y = 100.0*binwidth*y;   % percent occurrences
fname = "/home/sab/gsegrafix/data_files/gauss_theory.txt";
fid = fopen(fname, "w");
fprintf(fid, "%10.5f %10.5f\n", [x; y]);
fclose(fid);
@end example

@subsection 7.4.2 Parameter file
The parameter file looks like the following:

@example
file_name               "/home/sab/gsegrafix/data_files/gauss_data.txt"
file_format             "%lf"
plot_type               "histogram"
plot_style              Bk

file_name               "/home/sab/gsegrafix/data_files/gauss_theory.txt"
file_format             "%lf %lf"
plot_type               "points"
plot_style              lr

axis_type               "linear"

grid                    ls

xlabel                  "x axis"
ylabel                  "percent occurrences"
title                   "Gaussian Distribution"

line_coords             -1.645 -1.645 0 2.790
line_style              dr
line_coords             1.645  1.645 0 2.790
line_style              dr

legend_string           "data"
legend_string           "100*binwidth*p(x)"
legend_coords_rel       0.95 0.95
legend_anchor           "northeast"

text_string             "probability distribution"
text_string             "p(x) = [1/@{sqrt(2\xCF\x80)*a@}]*exp(-t\xC2\xB2)"
text_string             "t = (x - b)/@{sqrt(2)*a@}"
text_string             "a = standard deviation"
text_string             "b = mean"
text_string             ""
text_string             "mean = 0"
text_string             "standard deviation = 1"
text_string             "1000 samples"
text_string             ""
text_string             "90% of samples contained"
text_string             "between dashed lines at"
text_string             "x = \xC2\xB1 1.645"
text_coords_rel         0.05 0.95
text_anchor             "northwest"

font_size_date_time     12
font_size_legend        12
font_size_text          12
font_size_tick_labels   14
font_size_axis_labels   16
font_size_title         18
@end example

@subsection 7.4.3 Plot
The resulting plot is:

@image{./figures/gauss, , , gauss.png, .png}

@section 7.5 Example 5
@strong{Polar plot: gain of half-wavelength dipole antenna}

@subsection 7.5.1 Octave code
The data file was created using Octave with the following code:

@example
% dipole.m
%
% Calculates normalized gain pattern of half-wavelength dipole antenna.
%
% Reference:
%    Constantine Balanis, @cite{Antenna Theory,}
%    John Wiley & Sons, 1982, pp. 120 - 121

% Define constants
deg2rad = pi/180;   % (rad/deg)
DBL_MIN = 2.22507e-308;

% Calculate dipole antenna gain pattern
lambda = 1;
l = lambda/2;
k = 2*pi/lambda;
f1 = k*l/2;
theta = (0:1:360)'*deg2rad;
npts = length(theta);
gain = zeros(npts,1);
gain(1)   = DBL_MIN;
gain(181) = DBL_MIN;
gain(361) = DBL_MIN;
indices = [(2:180) (182:360)]';
gain(indices) = ((cos(f1*cos(theta(indices))) - cos(f1))./sin(theta(indices))).^2;
gain_dB = 10*log10(gain);

% Calculate 3-dB beam width
theta_3dB = interp1(gain_dB(1:181), theta(1:181), -3)/deg2rad;
beamwidth_3dB = 2*(90 - theta_3dB);

% Save data
fname = "/home/sab/gsegrafix/data_files/dipole.txt";
fid = fopen(fname, "w");
fprintf(fid, "%13.5e %13.5e %13.5e\n", [theta'; gain'; gain_dB']);
fclose(fid);
@end example

@subsection 7.5.2 Parameter file
The parameter file looks like the following:

@example
file_name               "/home/sab/gsegrafix/data_files/dipole.txt"
file_format             "%lf %*lf %lf"
plot_type               "points"
plot_style              lk

axis_type               "polar"

axis_limits             * * -40 0

minor_ticks             "on"

grid                    ls

xlabel                  "\xCE\xB8 (deg)"
ylabel                  "gain (dB)"
title                   "Normalized Gain of Half-Wavelength Dipole Antenna"

text_string             "Angles measured from antenna axis."
text_string             "3-dB beam width = 78 deg"
text_coords_rel         1.0 0.1
text_anchor             "northwest"

font_size_date_time     12
font_size_legend        12
font_size_text          12
font_size_tick_labels   14
font_size_axis_labels   16
font_size_title         18
@end example

@subsection 7.5.3 Plot
The resulting plot is:

@image{./figures/dipole, , , dipole.png, .png}

@section 7.6 Example 6
@strong{Three-dimensional points plot: logarithmic helix}

@subsection 7.6.1 Octave code
The data file was created using Octave with the following code:

@example
% loghelix.m
%
% Calculates data for 3d logarithmic helix plot.

theta = 20*pi*(0:0.001:1);
r = exp(0.05*theta);
x = r.*cos(theta);
y = r.*sin(theta);
z = theta;

fname = "/home/sab/gsegrafix/data_files/loghelix.txt";
fid = fopen(fname, "w");
fprintf(fid, "%10.5f %10.5f %10.5f\n", [x; y; z]);
fclose(fid);
@end example

@subsection 7.6.2 Parameter file
The parameter file looks like the following:

@example
file_name               "/home/sab/gsegrafix/data_files/loghelix.txt"
file_format             "%lf %lf %lf"
plot_type               "points"
plot_style              lr

axis_type               "3d"

axis_limits             -25 25 -25 25 * *

view3d                  30 30

grid                    ls

xlabel                  "x axis"
ylabel                  "y axis"
zlabel                  "z axis"
title                   "Logarithmic Helix"

text_string             "theta = 20*pi*(0:0.001:1)"
text_string             "r = exp(0.05*theta)"
text_string             "x = r*cos(theta)"
text_string             "y = r*sin(theta)"
text_string             "z = theta"
text_coords_rel         1.10 0.50
text_anchor             "west"

font_size_date_time     12
font_size_legend        12
font_size_text          12
font_size_tick_labels   14
font_size_axis_labels   16
font_size_title         18
@end example

@subsection 7.6.3 Plot
The resulting plot is:

@image{./figures/loghelix, , , loghelix.png, .png}

@section 7.7 Example 7
@strong{Three-dimensional mesh plot: z = sin(r)/r}

@subsection 7.7.1 Octave code
The data file was created using Octave with the following code:

@example
% sinc3d.m
%
% Calculates data for sin(r)/r plot, where r = sqrt(x^2 + y^2).

x = (-10:0.5:10) + 0.00001;
y = (-10:0.5:10) + 0.00001;
nx = length(x);
ny = length(y);
z = zeros(nx, ny);
for ( i = 1:nx )
   for ( j = 1:ny )
      r = sqrt(x(i)^2 + y(j)^2);
      z(i,j) = sin(r)/r;
   end
end

fname = "/home/sab/gsegrafix/data_files/sinc3d.txt";
fid = fopen(fname, "w");
fprintf(fid, "%10d%10d", nx, ny);
fprintf(fid, "\n");
fprintf(fid, "%10.2f", x);
fprintf(fid, "\n");
fprintf(fid, "%10.2f", y);
fprintf(fid, "\n");
for ( i = 1:nx )
   for ( j = 1:ny )
      fprintf(fid, "%10.5f", z(i,j));
   end
   fprintf(fid, "\n");
end
fclose(fid);
@end example

@subsection 7.7.2 Parameter file
The parameter file looks like the following:

@example
file_name               "/home/sab/gsegrafix/data_files/sinc3d.txt"
plot_type               "mesh"
plot_style              "auto" 0xC0

axis_type               "3d"

view3d                  30 30

minor_ticks             "on"

grid                    ls

xlabel                  "x axis"
ylabel                  "y axis"
zlabel                  "z axis"
title                   "z = sin(r)/r"

text_string             "r = sqrt(x\xC2\xB2 + y\xC2\xB2)"
text_coords_rel         1.10 0.50
text_anchor             "west"

font_size_date_time     12
font_size_legend        12
font_size_text          12
font_size_tick_labels   14
font_size_axis_labels   16
font_size_title         18
@end example

A separate data file, @uref{./help_files/sinc3d.txt, sinc3d.txt}, and parameter file, @uref{./help_files/sinc3d_param.txt, sinc3d_param.txt}, for this example can be copied and used to reproduce this plot. The path in the arguments for the file_name keyword must correspond to the path where the data file, sinc3d.txt, is saved.

@subsection 7.7.3 Plot
The resulting plot is:

@image{./figures/sinc3d, , , sinc3d.png, .png}

@section 7.8 Example 8
@strong{Three-dimensional contour plot: magnitude of complex function log(z)}

@subsection 7.8.1 Octave code
The data file was created using Octave with the following code:

@example
% logz.m
%
% Calculates data for magnitude of log(z) plot, where z = x + i*y.

x = [(-3.0:0.1:-0.1) -0.05 -0.02 0.02 0.05 (0.1:0.1:3.0)];
y = [(-3.0:0.1:-0.1) -0.05 -0.02 0.02 0.05 (0.1:0.1:3.0)];
nx = length(x);
ny = length(y);
mag = zeros(nx,ny);
for ( ii = 1:nx )
   for ( jj = 1:ny )
      z = x(ii) + i*y(jj);
      mag(ii,jj) = abs(log(z));
   end
end

fname = "/home/sab/gsegrafix/data_files/logz.txt";
fid = fopen(fname, "w");
fprintf(fid, "%10d%10d", nx, ny);
fprintf(fid, "\n");
fprintf(fid, "%10.3f", x);
fprintf(fid, "\n");
fprintf(fid, "%10.3f", y);
fprintf(fid, "\n");
for ( ii = 1:nx )
   for ( jj = 1:ny )
      fprintf(fid, "%15.5e", mag(ii,jj));
   end
   fprintf(fid, "\n");
end
fclose(fid);
@end example

@subsection 7.8.2 Parameter file
The parameter file looks like the following:

@example
file_name               "/home/sab/gsegrafix/data_files/logz.txt"
plot_type               "contour"
plot_style              0xD0723EFF 0x9C562EFF   # copper, dark copper

axis_type               "3d"

axis_limits             * * * * * 4

view3d                  300 30

contours                21

grid                    ls

xlabel                  "x axis"
ylabel                  "y axis"
zlabel                  "|log(z)|"
title                   "Magnitude of Complex Function log(z)"

text_string             "z = r*exp(i*theta)"
text_string             "log(z) = log(r) + i*theta"
text_coords_rel         1.10 0.50
text_anchor             "west"

font_size_date_time     12
font_size_legend        12
font_size_text          12
font_size_tick_labels   14
font_size_axis_labels   16
font_size_title         18
@end example

@subsection 7.8.3 Plot
The resulting plot is:

@image{./figures/logzcontour3d, , , logzcontour3d.png, .png}

@section 7.9 Example 9
@strong{Two-dimensional contour plot: magnitude of complex function log(z)}

@subsection 7.9.1 Octave code
The data file was created using Octave with the following code (same as for Example 8 above):

@example
% logz.m
%
% Calculates data for magnitude of log(z) plot, where z = x + i*y.

x = [(-3.0:0.1:-0.1) -0.05 -0.02 0.02 0.05 (0.1:0.1:3.0)];
y = [(-3.0:0.1:-0.1) -0.05 -0.02 0.02 0.05 (0.1:0.1:3.0)];
nx = length(x);
ny = length(y);
mag = zeros(nx,ny);
for ( ii = 1:nx )
   for ( jj = 1:ny )
      z = x(ii) + i*y(jj);
      mag(ii,jj) = abs(log(z));
   end
end

fname = "/home/sab/gsegrafix/data_files/logz.txt";
fid = fopen(fname, "w");
fprintf(fid, "%10d%10d", nx, ny);
fprintf(fid, "\n");
fprintf(fid, "%10.3f", x);
fprintf(fid, "\n");
fprintf(fid, "%10.3f", y);
fprintf(fid, "\n");
for ( ii = 1:nx )
   for ( jj = 1:ny )
      fprintf(fid, "%15.5e", mag(ii,jj));
   end
   fprintf(fid, "\n");
end
fclose(fid);
@end example

@subsection 7.9.2 Parameter file
The parameter file looks like the following:

@example
file_name               "/home/sab/gsegrafix/data_files/logz.txt"
plot_type               "contour"
plot_style              k

axis_type               "linear"

axis_limits             -3 3 -2.25 2.25 0 4

contours                9

minor_ticks             "on"

grid                    ls

xlabel                  "x axis"
ylabel                  "y axis"
title                   "Magnitude of Complex Function log(z)"

font_size_date_time     12
font_size_legend        12
font_size_text          12
font_size_tick_labels   14
font_size_axis_labels   16
font_size_title         18
@end example

@subsection 7.9.3 Plot
The resulting plot is:

@image{./figures/logzcontour2d, , , logzcontour2d.png, .png}

@section 7.10 Example 10
@strong{Two-dimensional color plot: magnitude of complex function log(z)}

@subsection 7.10.1 Octave code
The data file was created using Octave with the following code (same as for Example 8 above):

@example
% logz.m
%
% Calculates data for magnitude of log(z) plot, where z = x + i*y.

x = [(-3.0:0.1:-0.1) -0.05 -0.02 0.02 0.05 (0.1:0.1:3.0)];
y = [(-3.0:0.1:-0.1) -0.05 -0.02 0.02 0.05 (0.1:0.1:3.0)];
nx = length(x);
ny = length(y);
mag = zeros(nx,ny);
for ( ii = 1:nx )
   for ( jj = 1:ny )
      z = x(ii) + i*y(jj);
      mag(ii,jj) = abs(log(z));
   end
end

fname = "/home/sab/gsegrafix/data_files/logz.txt";
fid = fopen(fname, "w");
fprintf(fid, "%10d%10d", nx, ny);
fprintf(fid, "\n");
fprintf(fid, "%10.3f", x);
fprintf(fid, "\n");
fprintf(fid, "%10.3f", y);
fprintf(fid, "\n");
for ( ii = 1:nx )
   for ( jj = 1:ny )
      fprintf(fid, "%15.5e", mag(ii,jj));
   end
   fprintf(fid, "\n");
end
fclose(fid);
@end example

@subsection 7.10.2 Parameter file
The parameter file looks like the following:

@example
file_name               "/home/sab/gsegrafix/data_files/logz.txt"
plot_type               "color"
plot_style              "bilinear"

axis_type               "linear"

axis_limits             * * * * * 4

grid                    ls

xlabel                  "x axis"
ylabel                  "y axis"
zlabel                  "|log(z)|"
title                   "Magnitude of Complex Function log(z)"

font_size_date_time     12
font_size_legend        12
font_size_text          12
font_size_tick_labels   14
font_size_axis_labels   16
font_size_title         18
@end example

If there are z-coordinate values that are less than the value of zmin or greater than the value of zmax specified with an axis_limits keyword, these areas of the plot will have colors corresponding to zmin or zmax (blue or red), respectively.

@subsection 7.10.3 Plot
The resulting plot is:

@image{./figures/logzcolor2d, , , logzcolor2d.png, .png}

@section 7.11 Example 11
@strong{Two-dimensional color plot: Mandelbrot set}

@subsection 7.11.1 C code
The data file was created using the following C program (Octave was too slow):

@example
/*******************************************************************************
*
* Calculate Mandelbrot set.
*
* The Mandelbrot set consists of a set of points, c = x + iy, in the complex
* plane. These points must meet the condition that the magnitude of the complex
* number z does not grow without bound when the following operation is performed
* a large number of times:
*    z(n+1) = z(n)*z(n) + c, where z(0) = 0 + i0.
* When the data are plotted, colors are assigned to values of c according to the
* number of times the above operation had to be performed to cause the magnitude
* of z to exceed a specified value, in this case 2. The color black is assigned
* to points in the Mandelbrot set.
*
* Compile: gcc -Wall mandelbrot.c -o mandelbrot -lm
*
*******************************************************************************/

#include <complex.h>
#include <math.h>
#include <string.h>
#include <stdio.h>

int main ( int argc, char *argv[] )
   @{
   /* Declare variables */
   unsigned int i, j, nx, ny, count[500][500], count_max;
   double xmin, xmax, ymin, ymax, x[500], y[500], rmax;
   _Complex double c, z;
   char fname[] = "/home/sab/gsegrafix/data_files/mandelbrot.txt";
   FILE *fid;

   /* Define limits of calculation */
   xmin = -2.0;
   xmax =  0.5;
   ymin = -1.25;
   ymax =  1.25;

   /* Calculate x and y values for plotting area 433 pixels by 433 pixels */
   nx = 433;
   for ( i=1; i<=nx; i++ )
      x[i-1] = xmin + ( (double) (i - 1)/ (double) (nx - 1))*(xmax - xmin);

   ny = 433;
   for ( j=1; j<=ny; j++ )
      y[j-1] = ymin + ( (double) (j - 1)/ (double) (ny - 1))*(ymax - ymin);

   /* Set values of count to 0 for each value of x and y */
   for ( i=1; i<=nx; i++ )
      for ( j=1; j<=ny; j++ )
         count[i-1][j-1] = 0;

   /* Calculate Mandelbrot-set data */
   rmax = 2.0;
   count_max = 10000;
   for ( i=1; i<=nx; i++ )
      for ( j=1; j<=ny; j++ )
         @{
         c = x[i-1] + I*y[j-1];
         z = 0.0;
         while ( (cabs(z) <= rmax) && (count[i-1][j-1] <= count_max) )
            @{
            z = z*z + c;
            count[i-1][j-1]++;
            @}
         if ( count[i-1][j-1] > 0 )
            count[i-1][j-1]--;
         @}

   /* Save data to file */
   fid = fopen(fname, "w");
   fprintf(fid, "%u %u", nx, ny);
   fprintf(fid, "\n");
   for ( i=1; i<=nx; i++ )
      fprintf(fid, "%+10.7f ", x[i-1]);
   fprintf(fid, "\n");
   for ( j=1; j<=ny; j++ )
      fprintf(fid, "%+10.7f ", y[j-1]);
   fprintf(fid, "\n");
   for ( i=1; i<=nx; i++ )
      @{
      for ( j=1; j<=ny; j++ )
         @{
         if ( count[i-1][j-1] == count_max )
            fprintf(fid, "%5d ", -1);
         else
            fprintf(fid, "%5u ", count[i-1][j-1]);
         @}
      fprintf(fid, "\n");
      @}
   fclose(fid);

   return 0;
   @}
@end example

@subsection 7.11.2 Parameter file
The parameter file looks like the following:

@example
file_name               "/home/sab/gsegrafix/data_files/mandelbrot.txt"
plot_type               "color"
plot_style              "bilinear" 0 10000

axis_type               "linear"

axis_limits             -2.0 0.5 -1.25 1.25 0 100   # Changing zmax causes different
                                                    # color assignments for points
                                                    # outside the Mandelbrot set.

xlabel                  "x axis"
ylabel                  "y axis"
zlabel                  "count"
title                   "Mandelbrot Set"   # Points in the Mandelbrot set are black.

font_size_date_time     12
font_size_legend        12
font_size_text          12
font_size_tick_labels   14
font_size_axis_labels   16
font_size_title         18
@end example

@subsection 7.11.3 Plot
The resulting plot is:

@image{./figures/mandelbrot, , , mandelbrot.png, .png}

